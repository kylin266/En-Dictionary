{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from \"expo-sqlite\";\nexport var openDatabase = function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", SQLite.openDatabase('dictionary.db'));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createTable = function _callee5(db) {\n  var history, insert, bookmark;\n  return _regeneratorRuntime.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          history = \"CREATE TABLE IF NOT EXISTS history(\\n        word TEXT NOT NULL\\n        order INT\\n    );\";\n          insert = \"INSERT INTO history (word,order) VALUES('alien',1)\";\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee2(tx) {\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(history));\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 4:\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee3(tx) {\n            return _regeneratorRuntime.async(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(insert));\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 6:\n          bookmark = \"CREATE TABLE IF NOT EXISTS bookmark(\\n    word TEXT NOT NULL\\n    order INT\\n);\";\n          _context5.next = 9;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee4(tx) {\n            return _regeneratorRuntime.async(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(bookmark));\n\n                  case 2:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordHistory = function _callee7(db) {\n  var wordHistory, query, results;\n  return _regeneratorRuntime.async(function _callee7$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          wordHistory = [];\n          query = \"SELECT rowid as id,word,order FROM history\";\n          _context7.next = 5;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee6(tx) {\n            return _regeneratorRuntime.async(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(query));\n\n                  case 2:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 5:\n          results = _context7.sent;\n          results.forEach(function (result) {\n            for (var index = 0; index < result.rows.length; index++) {\n              wordHistory.push(result.rows.item(index));\n            }\n          });\n          console.log('word', wordHistory);\n          return _context7.abrupt(\"return\", wordHistory);\n\n        case 11:\n          _context7.prev = 11;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          throw Error('Failed to get WordHistory !!!');\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n};","map":{"version":3,"names":["SQLite","openDatabase","createTable","db","history","insert","transaction","tx","executeSql","bookmark","getWordHistory","wordHistory","query","results","forEach","result","index","rows","length","push","item","console","log","error","Error"],"sources":["/Users/littlecorn/Documents/lose-weight-apps/db.tsx"],"sourcesContent":["import * as SQLite from \"expo-sqlite\";\n\nexport const openDatabase = async () => {\n  return SQLite.openDatabase('dictionary.db');\n};\n\nexport const createTable = async (db: any) => {\n  // create table if not exists\n  const history = `CREATE TABLE IF NOT EXISTS history(\n        word TEXT NOT NULL\n        order INT\n    );`;\n    const insert = `INSERT INTO history (word,order) VALUES('alien',1)`;\n  await db.transaction(async(tx : any)=>{\n      await tx.executeSql(history);\n  });\n  await db.transaction(async(tx : any)=>{\n    await tx.executeSql(insert);\n});\n  const bookmark = `CREATE TABLE IF NOT EXISTS bookmark(\n    word TEXT NOT NULL\n    order INT\n);`; \nawait db.transaction(async(tx : any)=>{\n    await tx.executeSql(bookmark);\n});\n};\n\nexport const getWordHistory = async (db: any): Promise<[]> => {\n    try {\n      let wordHistory = [] as any;\n      const query = `SELECT rowid as id,word,order FROM history`;\n     const results =  await db.transaction(async(tx : any)=>{\n        await tx.executeSql(query);\n    });\n      results.forEach(result => {\n        for (let index = 0; index < result.rows.length; index++) {\n            wordHistory.push(result.rows.item(index))\n        }\n      });\n      console.log('word',wordHistory);\n      return wordHistory;\n    } catch (error) {\n      console.error(error);\n      throw Error('Failed to get WordHistory !!!');\n    }\n};"],"mappings":";AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AAEA,OAAO,IAAMC,YAAY,GAAG;EAAA;IAAA;MAAA;QAAA;UAAA,iCACnBD,MAAM,CAACC,YAAP,CAAoB,eAApB,CADmB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAArB;AAIP,OAAO,IAAMC,WAAW,GAAG,kBAAOC,EAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAEnBC,OAFmB;UAMjBC,MANiB;UAAA;UAAA,iCAOnBF,EAAE,CAACG,WAAH,CAAe,kBAAMC,EAAN;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCACXA,EAAE,CAACC,UAAH,CAAcJ,OAAd,CADW;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAPmB;;QAAA;UAAA;UAAA,iCAUnBD,EAAE,CAACG,WAAH,CAAe,kBAAMC,EAAN;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCACbA,EAAE,CAACC,UAAH,CAAcH,MAAd,CADa;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAVmB;;QAAA;UAanBI,QAbmB;UAAA;UAAA,iCAiBrBN,EAAE,CAACG,WAAH,CAAe,kBAAMC,EAAN;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCACXA,EAAE,CAACC,UAAH,CAAcC,QAAd,CADW;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAjBqB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAApB;AAsBP,OAAO,IAAMC,cAAc,GAAG,kBAAOP,EAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAEpBQ,WAFoB,GAEN,EAFM;UAGlBC,KAHkB;UAAA;UAAA,iCAIFT,EAAE,CAACG,WAAH,CAAe,kBAAMC,EAAN;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCAC7BA,EAAE,CAACC,UAAH,CAAcI,KAAd,CAD6B;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAJE;;QAAA;UAInBC,OAJmB;UAOxBA,OAAO,CAACC,OAAR,CAAgB,UAAAC,MAAM,EAAI;YACxB,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAYC,MAAxC,EAAgDF,KAAK,EAArD,EAAyD;cACrDL,WAAW,CAACQ,IAAZ,CAAiBJ,MAAM,CAACE,IAAP,CAAYG,IAAZ,CAAiBJ,KAAjB,CAAjB;YACH;UACF,CAJD;UAKAK,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBX,WAAnB;UAZwB,kCAajBA,WAbiB;;QAAA;UAAA;UAAA;UAexBU,OAAO,CAACE,KAAR;UAfwB,MAgBlBC,KAAK,CAAC,+BAAD,CAhBa;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAvB"},"metadata":{},"sourceType":"module"}