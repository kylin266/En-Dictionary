{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from \"expo-sqlite\";\nexport var openDatabase = function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", SQLite.openDatabase('dictionary.db'));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createTable = function _callee5(db) {\n  var history, insert, bookmark;\n  return _regeneratorRuntime.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          history = \"CREATE TABLE IF NOT EXISTS history (\\n        word TEXT NOT NULL\\n        location INT\\n    );\";\n          insert = \"INSERT INTO history (word,order) VALUES ('alien',1)\";\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee2(tx) {\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(history));\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 4:\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee3(tx) {\n            return _regeneratorRuntime.async(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(insert));\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 6:\n          bookmark = \"CREATE TABLE IF NOT EXISTS bookmark(\\n    word TEXT NOT NULL\\n    order INT\\n);\";\n          _context5.next = 9;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee4(tx) {\n            return _regeneratorRuntime.async(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(bookmark));\n\n                  case 2:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordHistory = function _callee7(db) {\n  var query, data, results;\n  return _regeneratorRuntime.async(function _callee7$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          query = \"SELECT * FROM history\";\n          data = [];\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee6(tx) {\n            return _regeneratorRuntime.async(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(query, null, function (tx, resultSet) {\n                      var data = [];\n\n                      for (var i = 0, c = resultSet.rows.length; i < c; i++) {\n                        data.push(resultSet.rows.item(i));\n                      }\n                    }, function (tx, error) {\n                      console.log(error.message);\n                    }));\n\n                  case 2:\n                    return _context6.abrupt(\"return\", _context6.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 4:\n          results = _context7.sent;\n          console.log('res', results);\n          return _context7.abrupt(\"return\", results || []);\n\n        case 7:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["SQLite","openDatabase","createTable","db","history","insert","transaction","tx","executeSql","bookmark","getWordHistory","query","data","resultSet","i","c","rows","length","push","item","error","console","log","message","results"],"sources":["/Users/littlecorn/Documents/lose-weight-apps/db.tsx"],"sourcesContent":["import * as SQLite from \"expo-sqlite\";\n\nexport const openDatabase = async () => {\n    return SQLite.openDatabase('dictionary.db');\n};\n\nexport const createTable = async (db: any) => {\n    // create table if not exists\n    const history = `CREATE TABLE IF NOT EXISTS history (\n        word TEXT NOT NULL\n        location INT\n    );`;\n    const insert = `INSERT INTO history (word,order) VALUES ('alien',1)`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(history);\n    });\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(insert);\n    });\n    const bookmark = `CREATE TABLE IF NOT EXISTS bookmark(\n    word TEXT NOT NULL\n    order INT\n);`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(bookmark);\n    });\n};\n\nexport const getWordHistory = async (db: any) => {\n    const query = `SELECT * FROM history`;\n    let data = [];\n    const results = await db.transaction(async (tx: any) => {\n        return await tx.executeSql(query,null,\n            function (tx: any, resultSet : any) {\n                let data = [];\n                for (let i = 0, c = resultSet.rows.length;i < c;i++) {\n                    data.push(resultSet.rows.item(i));\n                }\n            },\n            function (tx : any, error : any) {\n                console.log(error.message);\n            });\n        \n    });\n    console.log('res',results);\n    return results || [];\n};"],"mappings":";AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AAEA,OAAO,IAAMC,YAAY,GAAG;EAAA;IAAA;MAAA;QAAA;UAAA,iCACjBD,MAAM,CAACC,YAAP,CAAoB,eAApB,CADiB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAArB;AAIP,OAAO,IAAMC,WAAW,GAAG,kBAAOC,EAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAEjBC,OAFiB;UAMjBC,MANiB;UAAA;UAAA,iCAOjBF,EAAE,CAACG,WAAH,CAAe,kBAAOC,EAAP;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCACXA,EAAE,CAACC,UAAH,CAAcJ,OAAd,CADW;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAPiB;;QAAA;UAAA;UAAA,iCAUjBD,EAAE,CAACG,WAAH,CAAe,kBAAOC,EAAP;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCACXA,EAAE,CAACC,UAAH,CAAcH,MAAd,CADW;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAViB;;QAAA;UAajBI,QAbiB;UAAA;UAAA,iCAiBjBN,EAAE,CAACG,WAAH,CAAe,kBAAOC,EAAP;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCACXA,EAAE,CAACC,UAAH,CAAcC,QAAd,CADW;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAjBiB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAApB;AAsBP,OAAO,IAAMC,cAAc,GAAG,kBAAOP,EAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UACpBQ,KADoB;UAEtBC,IAFsB,GAEf,EAFe;UAAA;UAAA,iCAGJT,EAAE,CAACG,WAAH,CAAe,kBAAOC,EAAP;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCACpBA,EAAE,CAACC,UAAH,CAAcG,KAAd,EAAoB,IAApB,EACT,UAAUJ,EAAV,EAAmBM,SAAnB,EAAoC;sBAChC,IAAID,IAAI,GAAG,EAAX;;sBACA,KAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,SAAS,CAACG,IAAV,CAAeC,MAAnC,EAA0CH,CAAC,GAAGC,CAA9C,EAAgDD,CAAC,EAAjD,EAAqD;wBACjDF,IAAI,CAACM,IAAL,CAAUL,SAAS,CAACG,IAAV,CAAeG,IAAf,CAAoBL,CAApB,CAAV;sBACH;oBACJ,CANQ,EAOT,UAAUP,EAAV,EAAoBa,KAApB,EAAiC;sBAC7BC,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;oBACH,CATQ,CADoB;;kBAAA;oBAAA;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAHI;;QAAA;UAGpBC,OAHoB;UAgB1BH,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBE,OAAlB;UAhB0B,kCAiBnBA,OAAO,IAAI,EAjBQ;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAvB"},"metadata":{},"sourceType":"module"}