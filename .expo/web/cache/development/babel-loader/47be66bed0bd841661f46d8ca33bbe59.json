{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from \"expo-sqlite\";\nexport var openDatabase = function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('creating DB');\n          return _context.abrupt(\"return\", SQLite.openDatabase('dictionary.db'));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createTable = function _callee6(db) {\n  var clearData, history, insert, bookmark;\n  return _regeneratorRuntime.async(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          console.log('creating table');\n          clearData = 'DELETE FROM history where location=1';\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee2(tx) {\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(clearData));\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 4:\n          history = \"CREATE TABLE IF NOT EXISTS history (\\n        word TEXT NOT NULL,\\n        location INT NOT NULL AUTO INCREMENT\\n    );\";\n          insert = \"INSERT INTO history VALUES ('alien',1)\";\n          _context6.next = 8;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee3(tx) {\n            return _regeneratorRuntime.async(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(history, null, {}));\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 8:\n          _context6.next = 10;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee4(tx) {\n            return _regeneratorRuntime.async(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(insert));\n\n                  case 2:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 10:\n          bookmark = \"CREATE TABLE IF NOT EXISTS bookmark(\\n    word TEXT NOT NULL,\\n    location INT NOT NULL\\n);\";\n          _context6.next = 13;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee5(tx) {\n            return _regeneratorRuntime.async(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(bookmark));\n\n                  case 2:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordHistory = function _callee9(db) {\n  var query;\n  return _regeneratorRuntime.async(function _callee9$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          query = \"SELECT * FROM history\";\n          return _context9.abrupt(\"return\", new Promise(function _callee8(resolve) {\n            return _regeneratorRuntime.async(function _callee8$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    _context8.next = 2;\n                    return _regeneratorRuntime.awrap(db.transaction(function _callee7(tx) {\n                      return _regeneratorRuntime.async(function _callee7$(_context7) {\n                        while (1) {\n                          switch (_context7.prev = _context7.next) {\n                            case 0:\n                              _context7.next = 2;\n                              return _regeneratorRuntime.awrap(tx.executeSql(query, null, function (tx, resultSet) {\n                                var data = [];\n\n                                for (var i = 0, c = resultSet.rows.length; i < c; i++) {\n                                  data.push(resultSet.rows.item(i));\n                                }\n\n                                resolve(data);\n                              }, function (tx, error) {\n                                console.log(error.message);\n                              }));\n\n                            case 2:\n                            case \"end\":\n                              return _context7.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    }));\n\n                  case 2:\n                    return _context8.abrupt(\"return\", _context8.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var addHistory = function _callee11(db, word) {\n  var data, find;\n  return _regeneratorRuntime.async(function _callee11$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return _regeneratorRuntime.awrap(getWordHistory(db));\n\n        case 2:\n          data = _context11.sent;\n          find = \"SELECT * FROM history WHERE word = \\\"\" + word + \"'\";\n          console.log('statement', find);\n          _context11.next = 7;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee10(tx) {\n            return _regeneratorRuntime.async(function _callee10$(_context10) {\n              while (1) {\n                switch (_context10.prev = _context10.next) {\n                  case 0:\n                    _context10.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(find, null, function (tx, resultSet) {\n                      console.log('found', resultSet);\n                    }, function (tx, error) {\n                      console.log(error.message);\n                    }));\n\n                  case 2:\n                  case \"end\":\n                    return _context10.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 7:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["SQLite","openDatabase","console","log","createTable","db","clearData","transaction","tx","executeSql","history","insert","bookmark","getWordHistory","query","Promise","resolve","resultSet","data","i","c","rows","length","push","item","error","message","addHistory","word","find"],"sources":["/Users/littlecorn/Documents/lose-weight-apps/db.tsx"],"sourcesContent":["import * as SQLite from \"expo-sqlite\";\nimport { useState } from \"react\";\n\nexport const openDatabase = async () => {\n    console.log('creating DB');\n    return SQLite.openDatabase('dictionary.db');\n};\n\nexport const createTable = async (db: any) => {\n    // create table if not exists\n    console.log('creating table')\n    const clearData = 'DELETE FROM history where location=1';\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(clearData);\n    });\n    const history = `CREATE TABLE IF NOT EXISTS history (\n        word TEXT NOT NULL,\n        location INT NOT NULL AUTO INCREMENT\n    );`;\n    const insert = `INSERT INTO history VALUES ('alien',1)`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(history,null,{},);\n    });\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(insert);\n    });\n    const bookmark = `CREATE TABLE IF NOT EXISTS bookmark(\n    word TEXT NOT NULL,\n    location INT NOT NULL\n);`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(bookmark);\n    });\n};\n\nexport const getWordHistory = async (db: any) => {\n    const query = `SELECT * FROM history`;\n    return new Promise<any>(async resolve => \n     await db.transaction( async (tx: any) => {\n       await tx.executeSql(query,null,\n             (tx: any, resultSet : any) => {\n                let data = [];\n                for (let i = 0, c = resultSet.rows.length;i < c;i++) {\n                    data.push(resultSet.rows.item(i));\n                }\n                resolve(data);\n            },\n            (tx : any, error : any) => {\n                console.log(error.message);\n            });\n        \n    })\n    );\n};\nexport const addHistory = async (db: any, word: any) =>{\n    const data = await getWordHistory(db);\n    const find = `SELECT * FROM history WHERE word = \"${word}'`;\n    console.log('statement',find);\n    await db.transaction( async (tx: any) => {\n        await tx.executeSql(find,null,\n              (tx: any, resultSet : any) => {\n               \n                console.log('found',resultSet);\n             },\n             (tx : any, error : any) => {\n                 console.log(error.message);\n             });\n         \n     })\n    // const insert = `INSERT INTO history VALUES ('word',)`;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}