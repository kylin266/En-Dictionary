{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from \"expo-sqlite\";\nexport var openDatabase = function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", SQLite.openDatabase('dictionary.db'));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createTable = function _callee5(db) {\n  var history, insert, bookmark;\n  return _regeneratorRuntime.async(function _callee5$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          history = \"CREATE TABLE IF NOT EXISTS history(\\n        word TEXT NOT NULL\\n        order INT\\n    );\";\n          insert = \"INSERT INTO history (word,order) VALUES('alien',1)\";\n          _context5.next = 4;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee2(tx) {\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(history));\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 4:\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee3(tx) {\n            return _regeneratorRuntime.async(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(insert));\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 6:\n          bookmark = \"CREATE TABLE IF NOT EXISTS bookmark(\\n    word TEXT NOT NULL\\n    order INT\\n);\";\n          _context5.next = 9;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee4(tx) {\n            return _regeneratorRuntime.async(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(bookmark));\n\n                  case 2:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 9:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordHistory = function _callee7(db) {\n  var wordHistory, query, results;\n  return _regeneratorRuntime.async(function _callee7$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          wordHistory = [];\n          query = \"SELECT rowid as id,word,order FROM history\";\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee6(tx) {\n            return _regeneratorRuntime.async(function _callee6$(_context6) {\n              while (1) {\n                switch (_context6.prev = _context6.next) {\n                  case 0:\n                    _context6.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(query, [], function (_, _ref) {\n                      var any = _ref.rows;\n                    }));\n\n                  case 2:\n                    results.forEach(function (result) {\n                      for (var index = 0; index < result.rows.length; index++) {\n                        wordHistory.push(result.rows.item(index));\n                      }\n                    });\n                    console.log('word', wordHistory);\n                    return _context6.abrupt(\"return\", wordHistory);\n\n                  case 5:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 4:\n          results = _context7.sent;\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["SQLite","openDatabase","createTable","db","history","insert","transaction","tx","executeSql","bookmark","getWordHistory","wordHistory","query","_","any","rows","results","forEach","result","index","length","push","item","console","log"],"sources":["/Users/littlecorn/Documents/lose-weight-apps/db.tsx"],"sourcesContent":["import * as SQLite from \"expo-sqlite\";\n\nexport const openDatabase = async () => {\n    return SQLite.openDatabase('dictionary.db');\n};\n\nexport const createTable = async (db: any) => {\n    // create table if not exists\n    const history = `CREATE TABLE IF NOT EXISTS history(\n        word TEXT NOT NULL\n        order INT\n    );`;\n    const insert = `INSERT INTO history (word,order) VALUES('alien',1)`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(history);\n    });\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(insert);\n    });\n    const bookmark = `CREATE TABLE IF NOT EXISTS bookmark(\n    word TEXT NOT NULL\n    order INT\n);`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(bookmark);\n    });\n};\n\nexport const getWordHistory = async (db: any) => {\n    \n    let wordHistory = [] as any;\n    const query = `SELECT rowid as id,word,order FROM history`;\n    const results = await db.transaction(async (tx: any) => {\n        await tx.executeSql(query, [], (_: any, { rows: any }: any) => {\n\n        });\n\n        results.forEach((result: { rows: { length: number; item: (arg0: number) => any; }; }) => {\n            for (let index = 0; index < result.rows.length; index++) {\n                wordHistory.push(result.rows.item(index))\n            }\n        });\n        console.log('word', wordHistory);\n        return wordHistory;\n    });\n};"],"mappings":";AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AAEA,OAAO,IAAMC,YAAY,GAAG;EAAA;IAAA;MAAA;QAAA;UAAA,iCACjBD,MAAM,CAACC,YAAP,CAAoB,eAApB,CADiB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAArB;AAIP,OAAO,IAAMC,WAAW,GAAG,kBAAOC,EAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAEjBC,OAFiB;UAMjBC,MANiB;UAAA;UAAA,iCAOjBF,EAAE,CAACG,WAAH,CAAe,kBAAOC,EAAP;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCACXA,EAAE,CAACC,UAAH,CAAcJ,OAAd,CADW;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAPiB;;QAAA;UAAA;UAAA,iCAUjBD,EAAE,CAACG,WAAH,CAAe,kBAAOC,EAAP;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCACXA,EAAE,CAACC,UAAH,CAAcH,MAAd,CADW;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAViB;;QAAA;UAajBI,QAbiB;UAAA;UAAA,iCAiBjBN,EAAE,CAACG,WAAH,CAAe,kBAAOC,EAAP;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCACXA,EAAE,CAACC,UAAH,CAAcC,QAAd,CADW;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAjBiB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAApB;AAsBP,OAAO,IAAMC,cAAc,GAAG,kBAAOP,EAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAEtBQ,WAFsB,GAER,EAFQ;UAGpBC,KAHoB;UAAA;UAAA,iCAIJT,EAAE,CAACG,WAAH,CAAe,kBAAOC,EAAP;YAAA;cAAA;gBAAA;kBAAA;oBAAA;oBAAA,iCAC3BA,EAAE,CAACC,UAAH,CAAcI,KAAd,EAAqB,EAArB,EAAyB,UAACC,CAAD,QAAgC;sBAAA,IAAfC,GAAe,QAArBC,IAAqB;oBAE9D,CAFK,CAD2B;;kBAAA;oBAKjCC,OAAO,CAACC,OAAR,CAAgB,UAACC,MAAD,EAAyE;sBACrF,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,MAAM,CAACH,IAAP,CAAYK,MAAxC,EAAgDD,KAAK,EAArD,EAAyD;wBACrDR,WAAW,CAACU,IAAZ,CAAiBH,MAAM,CAACH,IAAP,CAAYO,IAAZ,CAAiBH,KAAjB,CAAjB;sBACH;oBACJ,CAJD;oBAKAI,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBb,WAApB;oBAViC,kCAW1BA,WAX0B;;kBAAA;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAAf,CAJI;;QAAA;UAIpBK,OAJoB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAvB"},"metadata":{},"sourceType":"module"}