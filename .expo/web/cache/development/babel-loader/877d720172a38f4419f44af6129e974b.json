{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport { useCallback, useEffect, useState } from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var isLoadingComplete = useCachedResources();\n  var colorScheme = useColorScheme();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var loadDataCallback = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {} catch (error) {\n              console.error(error);\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n  useEffect(function () {\n    loadDataCallback();\n  }, [loadDataCallback]);\n  console.log('getdata', data);\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return _jsxs(SafeAreaProvider, {\n      children: [_jsx(Navigation, {\n        colorScheme: colorScheme\n      }), _jsx(StatusBar, {})]\n    });\n  }\n}","map":{"version":3,"names":["StatusBar","useCallback","useEffect","useState","SafeAreaProvider","useCachedResources","useColorScheme","Navigation","App","isLoadingComplete","colorScheme","data","setData","loadDataCallback","error","console","log"],"sources":["/Users/littlecorn/Documents/lose-weight-apps/App.tsx"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport { useCallback, useEffect, useState } from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\nimport {createTable,getDBConnection,getWordHistory} from './db';\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n  const [data,setData] = useState([]);\n  const loadDataCallback = useCallback(async () => {\n    try {\n      // const db = await getDBConnection();\n      // await createTable(db);\n      // const storedWord = await getWordHistory(db);\n      // if (storedWord.length) {\n      //   setData(storedWord);\n      // }\n    } catch (error) {\n      console.error(error);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadDataCallback();\n  }, [loadDataCallback]);\n\n  console.log('getdata',data);\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AAEA,OAAOC,kBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,UAAP;;;AAEA,eAAe,SAASC,GAAT,GAAe;EAC5B,IAAMC,iBAAiB,GAAGJ,kBAAkB,EAA5C;EACA,IAAMK,WAAW,GAAGJ,cAAc,EAAlC;;EACA,gBAAuBH,QAAQ,CAAC,EAAD,CAA/B;EAAA;EAAA,IAAOQ,IAAP;EAAA,IAAYC,OAAZ;;EACA,IAAMC,gBAAgB,GAAGZ,WAAW,CAAC;IAAA;MAAA;QAAA;UAAA;YACnC,IAAI,CAOH,CAPD,CAOE,OAAOa,KAAP,EAAc;cACdC,OAAO,CAACD,KAAR,CAAcA,KAAd;YACD;;UAVkC;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAD,EAWjC,EAXiC,CAApC;EAaAZ,SAAS,CAAC,YAAM;IACdW,gBAAgB;EACjB,CAFQ,EAEN,CAACA,gBAAD,CAFM,CAAT;EAIAE,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBL,IAAtB;;EACA,IAAI,CAACF,iBAAL,EAAwB;IACtB,OAAO,IAAP;EACD,CAFD,MAEO;IACL,OACE,MAAC,gBAAD;MAAA,WACE,KAAC,UAAD;QAAY,WAAW,EAAEC;MAAzB,EADF,EAEE,KAAC,SAAD,KAFF;IAAA,EADF;EAMD;AACF"},"metadata":{},"sourceType":"module"}