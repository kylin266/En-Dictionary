{"ast":null,"code":"var NativeModules = require(\"react-native\").NativeModules;\n\nvar DB_STATE_INIT, DB_STATE_OPEN, READ_ONLY_REGEX, SQLiteFactory, SQLitePlugin, SQLitePluginTransaction, argsArray, dblocations, newSQLError, txLocks;\nvar plugin = {};\nREAD_ONLY_REGEX = /^(\\s|;)*(?:alter|create|delete|drop|insert|reindex|replace|update)/i;\nDB_STATE_INIT = \"INIT\";\nDB_STATE_OPEN = \"OPEN\";\ntxLocks = {};\n\nnewSQLError = function newSQLError(error, code) {\n  var sqlError;\n  sqlError = error;\n\n  if (!code) {\n    code = 0;\n  }\n\n  if (!sqlError) {\n    sqlError = new Error(\"a plugin had an error but provided no response\");\n    sqlError.code = code;\n  }\n\n  if (typeof sqlError === \"string\") {\n    sqlError = new Error(error);\n    sqlError.code = code;\n  }\n\n  if (!sqlError.code && sqlError.message) {\n    sqlError.code = code;\n  }\n\n  if (!sqlError.code && !sqlError.message) {\n    sqlError = new Error(\"an unknown error was returned: \" + JSON.stringify(sqlError));\n    sqlError.code = code;\n  }\n\n  return sqlError;\n};\n\nvar nextTick = setImmediate || function (fun) {\n  setTimeout(fun, 0);\n};\n\nif (global.window) {\n  nextTick = window.setImmediate || function (fun) {\n    window.setTimeout(fun, 0);\n  };\n}\n\nargsArray = function argsArray(fun) {\n  return function () {\n    var args, i, len;\n    len = arguments.length;\n\n    if (len) {\n      args = [];\n      i = -1;\n\n      while (++i < len) {\n        args[i] = arguments[i];\n      }\n\n      return fun.call(this, args);\n    } else {\n      return fun.call(this, []);\n    }\n  };\n};\n\nplugin.exec = function (method, options, success, error) {\n  if (plugin.sqlitePlugin.DEBUG) {\n    plugin.log(\"SQLite.\" + method + \"(\" + JSON.stringify(options) + \")\");\n  }\n\n  NativeModules[\"SQLite\"][method](options, success, error);\n};\n\nplugin.log = function () {\n  if (plugin.sqlitePlugin.DEBUG) {\n    var _console;\n\n    (_console = console).log.apply(_console, arguments);\n  }\n};\n\nplugin.warn = function () {\n  var _console2;\n\n  (_console2 = console).warn.apply(_console2, arguments);\n};\n\nplugin.error = function () {\n  var _console3;\n\n  (_console3 = console).error.apply(_console3, arguments);\n};\n\nSQLitePlugin = function SQLitePlugin(openargs, openSuccess, openError) {\n  var dbname;\n\n  if (!(openargs && openargs[\"name\"])) {\n    throw newSQLError(\"Cannot create a SQLitePlugin db instance without a db name\");\n  }\n\n  dbname = openargs.name;\n\n  if (typeof dbname !== \"string\") {\n    throw newSQLError(\"sqlite plugin database name must be a string\");\n  }\n\n  this.openargs = openargs;\n  this.dbname = dbname;\n  this.openSuccess = openSuccess;\n  this.openError = openError;\n  this.openSuccess || (this.openSuccess = function () {\n    plugin.log(\"DB opened: \" + dbname);\n  });\n  this.openError || (this.openError = function (e) {\n    plugin.log(e.message);\n  });\n  this.open(this.openSuccess, this.openError);\n};\n\nSQLitePlugin.prototype.databaseFeatures = {\n  isSQLitePluginDatabase: true\n};\nSQLitePlugin.prototype.openDBs = {};\n\nSQLitePlugin.prototype.addTransaction = function (t) {\n  if (!txLocks[this.dbname]) {\n    txLocks[this.dbname] = {\n      queue: [],\n      inProgress: false\n    };\n  }\n\n  txLocks[this.dbname].queue.push(t);\n\n  if (this.dbname in this.openDBs && this.openDBs[this.dbname] !== DB_STATE_INIT) {\n    this.startNextTransaction();\n  } else {\n    if (this.dbname in this.openDBs) {\n      plugin.log(\"new transaction is waiting for open operation\");\n    } else {\n      plugin.log(\"database is closed, new transaction is [stuck] waiting until db is opened again!\");\n    }\n  }\n};\n\nSQLitePlugin.prototype.transaction = function (fn, error, success) {\n  if (!this.openDBs[this.dbname]) {\n    error(newSQLError(\"database not open\"));\n    return;\n  }\n\n  this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, true, false));\n};\n\nSQLitePlugin.prototype.readTransaction = function (fn, error, success) {\n  if (!this.openDBs[this.dbname]) {\n    error(newSQLError(\"database not open\"));\n    return;\n  }\n\n  this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, false, true));\n};\n\nSQLitePlugin.prototype.startNextTransaction = function () {\n  var self;\n  self = this;\n  nextTick(function (_this) {\n    return function () {\n      var txLock;\n\n      if (!(_this.dbname in _this.openDBs) || _this.openDBs[_this.dbname] !== DB_STATE_OPEN) {\n        plugin.log(\"cannot start next transaction: database not open\");\n        return;\n      }\n\n      txLock = txLocks[self.dbname];\n\n      if (!txLock) {\n        plugin.log(\"cannot start next transaction: database connection is lost\");\n      } else if (txLock.queue.length > 0 && !txLock.inProgress) {\n        txLock.inProgress = true;\n        txLock.queue.shift().start();\n      }\n    };\n  }(this));\n};\n\nSQLitePlugin.prototype.abortAllPendingTransactions = function () {\n  var j, len1, ref, tx, txLock;\n  txLock = txLocks[this.dbname];\n\n  if (!!txLock && txLock.queue.length > 0) {\n    ref = txLock.queue;\n\n    for (j = 0, len1 = ref.length; j < len1; j++) {\n      tx = ref[j];\n      tx.abortFromQ(newSQLError(\"Invalid database handle\"));\n    }\n\n    txLock.queue = [];\n    txLock.inProgress = false;\n  }\n};\n\nSQLitePlugin.prototype.sqlBatch = function (sqlStatements, success, error) {\n  var batchList, j, len1, myfn, st;\n\n  if (!sqlStatements || sqlStatements.constructor !== Array) {\n    throw newSQLError(\"sqlBatch expects an array\");\n  }\n\n  batchList = [];\n\n  for (j = 0, len1 = sqlStatements.length; j < len1; j++) {\n    st = sqlStatements[j];\n\n    if (st.constructor === Array) {\n      if (st.length === 0) {\n        throw newSQLError(\"sqlBatch array element of zero (0) length\");\n      }\n\n      batchList.push({\n        sql: st[0],\n        params: st.length === 0 ? [] : st[1]\n      });\n    } else {\n      batchList.push({\n        sql: st,\n        params: []\n      });\n    }\n  }\n\n  myfn = function myfn(tx) {\n    var elem, k, len2, results;\n    results = [];\n\n    for (k = 0, len2 = batchList.length; k < len2; k++) {\n      elem = batchList[k];\n      results.push(tx.addStatement(elem.sql, elem.params, null, null));\n    }\n\n    return results;\n  };\n\n  var mysuccess = function mysuccess() {\n    if (!!success) {\n      return success();\n    }\n  };\n\n  var myerror = function myerror(e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \", e);\n    }\n  };\n\n  this.addTransaction(new SQLitePluginTransaction(this, myfn, myerror, mysuccess, true, false));\n};\n\nSQLitePlugin.prototype.open = function (success, error) {\n  var openerrorcb, opensuccesscb;\n\n  if (this.dbname in this.openDBs && this.openDBs[this.dbname] === DB_STATE_OPEN) {\n    plugin.log(\"database already open: \" + this.dbname);\n    nextTick(function (_this) {\n      return function () {\n        success(_this);\n      };\n    }(this));\n  } else {\n    plugin.log(\"OPEN database: \" + this.dbname);\n\n    opensuccesscb = function (_this) {\n      return function () {\n        var txLock;\n\n        if (!_this.openDBs[_this.dbname]) {\n          plugin.log(\"database was closed during open operation\");\n        }\n\n        if (_this.dbname in _this.openDBs) {\n          _this.openDBs[_this.dbname] = DB_STATE_OPEN;\n        }\n\n        if (!!success) {\n          success(_this);\n        }\n\n        txLock = txLocks[_this.dbname];\n\n        if (!!txLock && txLock.queue.length > 0 && !txLock.inProgress) {\n          _this.startNextTransaction();\n        }\n      };\n    }(this);\n\n    openerrorcb = function (_this) {\n      return function () {\n        plugin.log(\"OPEN database: \" + _this.dbname + \" failed, aborting any pending transactions\");\n\n        if (!!error) {\n          error(newSQLError(\"Could not open database\"));\n        }\n\n        delete _this.openDBs[_this.dbname];\n\n        _this.abortAllPendingTransactions();\n      };\n    }(this);\n\n    this.openDBs[this.dbname] = DB_STATE_INIT;\n    plugin.exec(\"open\", this.openargs, opensuccesscb, openerrorcb);\n  }\n};\n\nSQLitePlugin.prototype.close = function (success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot close: transaction is in progress\");\n      error(newSQLError(\"database cannot be closed while a transaction is in progress\"));\n      return;\n    }\n\n    plugin.log(\"CLOSE database: \" + this.dbname);\n    delete this.openDBs[this.dbname];\n\n    if (txLocks[this.dbname]) {\n      plugin.log(\"closing db with transaction queue length: \" + txLocks[this.dbname].queue.length);\n    } else {\n      plugin.log(\"closing db with no transaction lock state\");\n    }\n\n    var mysuccess = function mysuccess(t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n\n    var myerror = function myerror(t, e) {\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \", e);\n      }\n    };\n\n    plugin.exec(\"close\", {\n      path: this.dbname\n    }, mysuccess, myerror);\n  } else {\n    var err = \"cannot close: database is not open\";\n    plugin.log(err);\n\n    if (error) {\n      nextTick(function () {\n        return error(err);\n      });\n    }\n  }\n};\n\nSQLitePlugin.prototype.attach = function (dbNameToAttach, dbAlias, success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot attach: transaction is in progress\");\n      error(newSQLError(\"database cannot be attached while a transaction is in progress\"));\n      return;\n    }\n\n    plugin.log(\"ATTACH database \" + dbNameToAttach + \" to \" + this.dbname + \" with alias \" + dbAlias);\n\n    var mysuccess = function mysuccess(t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n\n    var myerror = function myerror(e) {\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \", e);\n      }\n    };\n\n    plugin.exec(\"attach\", {\n      path: this.dbname,\n      dbName: dbNameToAttach,\n      dbAlias: dbAlias\n    }, mysuccess, myerror);\n  } else {\n    var err = \"cannot attach: database is not open\";\n\n    if (error) {\n      nextTick(function () {\n        return error(err);\n      });\n    }\n  }\n};\n\nSQLitePlugin.prototype.detach = function (dbAlias, success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot attach: transaction is in progress\");\n      error(newSQLError(\"database cannot be attached while a transaction is in progress\"));\n      return;\n    }\n\n    plugin.log(\"DETACH database \" + dbAlias + \" from \" + this.dbname);\n\n    var mysuccess = function mysuccess(t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n\n    var myerror = function myerror(e) {\n      plugin.log(\"ERR\", e);\n\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \", e);\n      }\n    };\n\n    this.executeSql(\"DETACH DATABASE \" + dbAlias, [], mysuccess, myerror);\n  } else {\n    var err = \"cannot attach: database is not open\";\n    plugin.log(err);\n\n    if (error) {\n      nextTick(function () {\n        return error(err);\n      });\n    }\n  }\n};\n\nSQLitePlugin.prototype.executeSql = function (statement, params, success, error) {\n  var myerror, myfn, mysuccess;\n\n  mysuccess = function mysuccess(t, r) {\n    if (!!success) {\n      return success(r);\n    }\n  };\n\n  myerror = function myerror(t, e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \", e);\n    }\n  };\n\n  myfn = function myfn(tx) {\n    tx.addStatement(statement, params, mysuccess, myerror);\n  };\n\n  this.addTransaction(new SQLitePluginTransaction(this, myfn, null, null, false, false));\n};\n\nSQLitePluginTransaction = function SQLitePluginTransaction(db, fn, error, success, txlock, readOnly) {\n  if (typeof fn !== \"function\") {\n    var err = newSQLError(\"transaction expected a function\");\n\n    if (!!error) {\n      return error(err);\n    } else {\n      throw err;\n    }\n  }\n\n  this.db = db;\n  this.fn = fn;\n  this.error = error;\n  this.success = success;\n  this.txlock = txlock;\n  this.readOnly = readOnly;\n  this.executes = [];\n\n  if (txlock) {\n    this.addStatement(\"BEGIN\", [], null, function (tx, err) {\n      throw newSQLError(\"unable to begin transaction: \" + err.message, err.code);\n    });\n  } else {\n    this.addStatement(\"SELECT 1\", [], null, null);\n  }\n};\n\nSQLitePluginTransaction.prototype.start = function () {\n  var err;\n\n  try {\n    this.fn(this);\n    this.run();\n  } catch (_error) {\n    err = _error;\n    txLocks[this.db.dbname].inProgress = false;\n    this.db.startNextTransaction();\n\n    if (this.error) {\n      this.error(newSQLError(err));\n    }\n  }\n};\n\nSQLitePluginTransaction.prototype.executeSql = function (sql, values, success, error) {\n  var that = this;\n\n  if (that.finalized) {\n    throw {\n      message: \"InvalidStateError: DOM Exception 11: This transaction is already finalized. Transactions are committed\" + \" after its success or failure handlers are called. If you are using a Promise to handle callbacks, be aware that\" + \" implementations following the A+ standard adhere to run-to-completion semantics and so Promise resolution occurs\" + \" on a subsequent tick and therefore after the transaction commits.\",\n      code: 11\n    };\n  }\n\n  if (that.readOnly && READ_ONLY_REGEX.test(sql)) {\n    that.handleStatementFailure(error, {\n      message: \"invalid sql for a read-only transaction\"\n    });\n    return;\n  }\n\n  var mysuccess = function mysuccess(t, r) {\n    if (!!success) {\n      return success(t, r);\n    }\n  };\n\n  var myerror = function myerror(t, e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \", e);\n    }\n  };\n\n  that.addStatement(sql, values, mysuccess, myerror);\n};\n\nSQLitePluginTransaction.prototype.addStatement = function (sql, values, success, error) {\n  var j, len1, params, sqlStatement, t, v;\n  sqlStatement = typeof sql === \"string\" ? sql : sql.toString();\n  params = [];\n\n  if (!!values && values.constructor === Array) {\n    for (j = 0, len1 = values.length; j < len1; j++) {\n      v = values[j];\n      t = typeof v;\n\n      if (v === null || v === void 0 || t === \"number\" || t === \"string\") {\n        params.push(v);\n      } else if (t === \"boolean\") {\n        params.push(~~v);\n      } else if (t !== \"function\") {\n        params.push(v.toString());\n        plugin.warn(\"addStatement - parameter of type <\" + t + \"> converted to string using toString()\");\n      } else {\n        var errorMsg = \"Unsupported parameter type <\" + t + \"> found in addStatement()\";\n        plugin.error(errorMsg);\n        error(newSQLError(errorMsg));\n        return;\n      }\n    }\n  }\n\n  this.executes.push({\n    success: success,\n    error: error,\n    sql: sqlStatement,\n    params: params\n  });\n};\n\nSQLitePluginTransaction.prototype.handleStatementSuccess = function (handler, response) {\n  var payload, rows;\n\n  if (!handler) {\n    return;\n  }\n\n  rows = response.rows || [];\n  payload = {\n    rows: {\n      item: function item(i) {\n        return rows[i];\n      },\n      raw: function raw() {\n        return rows.slice();\n      },\n      length: rows.length\n    },\n    rowsAffected: response.rowsAffected || 0,\n    insertId: response.insertId || void 0\n  };\n  handler(this, payload);\n};\n\nSQLitePluginTransaction.prototype.handleStatementFailure = function (handler, response) {\n  if (!handler) {\n    throw newSQLError(\"a statement with no error handler failed: \" + response.message, response.code);\n  }\n\n  if (handler(this, response) !== false) {\n    throw newSQLError(\"a statement error callback did not return false: \" + response.message, response.code);\n  }\n};\n\nSQLitePluginTransaction.prototype.run = function () {\n  var batchExecutes, handlerFor, i, callbacks, request, tropts, tx, txFailure, waiting;\n  txFailure = null;\n  tropts = [];\n  batchExecutes = this.executes;\n  waiting = batchExecutes.length;\n  this.executes = [];\n  tx = this;\n\n  handlerFor = function handlerFor(index, didSucceed) {\n    return function (response) {\n      if (!txFailure) {\n        try {\n          if (didSucceed) {\n            tx.handleStatementSuccess(batchExecutes[index].success, response);\n          } else {\n            tx.handleStatementFailure(batchExecutes[index].error, newSQLError(response));\n          }\n        } catch (err) {\n          var errorMsg = JSON.stringify(err);\n          if (errorMsg === \"{}\") errorMsg = err.toString();\n          plugin.log(\"warning - exception while invoking a callback: \" + errorMsg);\n        }\n\n        if (!didSucceed) {\n          txFailure = newSQLError(response);\n        }\n      }\n\n      if (--waiting === 0) {\n        if (txFailure) {\n          tx.executes = [];\n          tx.abort(txFailure);\n        } else if (tx.executes.length > 0) {\n          tx.run();\n        } else {\n          tx.finish();\n        }\n      }\n    };\n  };\n\n  i = 0;\n  callbacks = [];\n\n  while (i < batchExecutes.length) {\n    request = batchExecutes[i];\n    callbacks.push({\n      success: handlerFor(i, true),\n      error: handlerFor(i, false)\n    });\n    tropts.push({\n      qid: 1111,\n      sql: request.sql,\n      params: request.params\n    });\n    i++;\n  }\n\n  var mysuccess = function mysuccess(result) {\n    var j, last, q, r, res, type;\n\n    if (result.length === 0) {\n      return;\n    }\n\n    last = result.length - 1;\n\n    for (j = 0; j <= last; ++j) {\n      r = result[j];\n      type = r.type;\n      res = r.result;\n      q = callbacks[j];\n\n      if (q) {\n        if (q[type]) {\n          q[type](res);\n        }\n      }\n    }\n  };\n\n  var myerror = function myerror(error) {\n    plugin.log(\"batch execution error: \", error);\n  };\n\n  plugin.exec(\"backgroundExecuteSqlBatch\", {\n    dbargs: {\n      dbname: this.db.dbname\n    },\n    executes: tropts\n  }, mysuccess, myerror);\n};\n\nSQLitePluginTransaction.prototype.abort = function (txFailure) {\n  var failed, succeeded, tx;\n\n  if (this.finalized) {\n    return;\n  }\n\n  tx = this;\n\n  succeeded = function succeeded(tx) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n\n    if (tx.error) {\n      tx.error(txFailure);\n    }\n  };\n\n  failed = function failed(tx, err) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n\n    if (tx.error) {\n      tx.error(newSQLError(\"error while trying to roll back: \" + err.message, err.code));\n    }\n  };\n\n  this.finalized = true;\n\n  if (this.txlock) {\n    this.addStatement(\"ROLLBACK\", [], succeeded, failed);\n    this.run();\n  } else {\n    succeeded(tx);\n  }\n};\n\nSQLitePluginTransaction.prototype.finish = function () {\n  var failed, succeeded, tx;\n\n  if (this.finalized) {\n    return;\n  }\n\n  tx = this;\n\n  succeeded = function succeeded(tx) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n\n    if (tx.success) {\n      tx.success();\n    }\n  };\n\n  failed = function failed(tx, err) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n\n    if (tx.error) {\n      tx.error(newSQLError(\"error while trying to commit: \" + err.message, err.code));\n    }\n  };\n\n  this.finalized = true;\n\n  if (this.txlock) {\n    this.addStatement(\"COMMIT\", [], succeeded, failed);\n    this.run();\n  } else {\n    succeeded(tx);\n  }\n};\n\nSQLitePluginTransaction.prototype.abortFromQ = function (sqlerror) {\n  if (this.error) {\n    this.error(sqlerror);\n  }\n};\n\ndblocations = {\n  \"default\": \"nosync\",\n  \"Documents\": \"docs\",\n  \"Library\": \"libs\",\n  \"Shared\": \"shared\"\n};\n\nSQLiteFactory = function SQLiteFactory() {};\n\nSQLiteFactory.prototype.DEBUG = function (debug) {\n  plugin.log(\"Setting debug to:\", debug);\n  plugin.sqlitePlugin.DEBUG = debug;\n};\n\nSQLiteFactory.prototype.sqliteFeatures = function () {\n  return {\n    isSQLitePlugin: true\n  };\n};\n\nSQLiteFactory.prototype.openDatabase = argsArray(function (args) {\n  var errorcb, first, okcb, openargs, readOnly;\n\n  if (args.length < 1) {\n    return null;\n  }\n\n  first = args[0];\n  openargs = null;\n\n  okcb = errorcb = function errorcb() {};\n\n  if (first.constructor === String) {\n    openargs = {\n      name: first,\n      dblocation: dblocations[\"default\"]\n    };\n\n    if (args.length >= 5) {\n      okcb = args[4];\n\n      if (args.length > 5) {\n        errorcb = args[5];\n      }\n    }\n  } else {\n    openargs = first;\n    readOnly = !!openargs.readOnly;\n\n    if (!readOnly && (!openargs.location || openargs.location.constructor !== String || !dblocations.hasOwnProperty(openargs.location))) {\n      openargs.dblocation = dblocations[\"default\"];\n    } else {\n      openargs.dblocation = dblocations[openargs.location];\n    }\n\n    if (!!openargs.createFromLocation) {\n      if (openargs.createFromLocation === 1) {\n        openargs.assetFilename = \"1\";\n      } else if (typeof openargs.createFromLocation === \"string\") {\n        openargs.assetFilename = openargs.createFromLocation;\n      }\n    }\n\n    if (!!openargs.androidDatabaseImplementation && openargs.androidDatabaseImplementation === 2) {\n      openargs.androidOldDatabaseImplementation = 1;\n    }\n\n    if (!!openargs.androidLockWorkaround && openargs.androidLockWorkaround === 1) {\n      openargs.androidBugWorkaround = 1;\n    }\n\n    if (args.length >= 2) {\n      okcb = args[1];\n\n      if (args.length > 2) {\n        errorcb = args[2];\n      }\n    }\n  }\n\n  return new SQLitePlugin(openargs, okcb, errorcb);\n});\n\nSQLiteFactory.prototype.echoTest = function (success, error) {\n  var inputTestValue = \"test-string\";\n\n  var mysuccess = function mysuccess(testValue) {\n    if (testValue === inputTestValue) {\n      return success();\n    } else {\n      return error(\"Mismatch: got: \" + testValue + \" , expected: \" + inputTestValue);\n    }\n  };\n\n  var myerror = function myerror(e) {\n    return error(e);\n  };\n\n  plugin.exec(\"echoStringValue\", {\n    value: inputTestValue\n  }, mysuccess, myerror);\n};\n\nSQLiteFactory.prototype.deleteDatabase = function (first, success, error) {\n  var args = {};\n\n  if (first.constructor === String) {\n    args.path = first;\n    args.dblocation = dblocations[\"default\"];\n  } else {\n    if (!(first && first[\"name\"])) {\n      throw new Error(\"Please specify db name via name property\");\n    }\n\n    args.path = first.name;\n\n    if (!first.location || first.location.constructor !== String || !dblocations.hasOwnProperty(first.location)) {\n      args.dblocation = dblocations[\"default\"];\n    } else {\n      args.dblocation = dblocations[first.location];\n    }\n  }\n\n  var mysuccess = function mysuccess(r) {\n    delete SQLitePlugin.prototype.openDBs[args.path];\n\n    if (!!success) {\n      return success(r);\n    }\n  };\n\n  var myerror = function myerror(e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"deleteDatabase error handler not provided: \", e);\n    }\n  };\n\n  plugin.exec(\"delete\", args, mysuccess, myerror);\n};\n\nplugin.sqlitePlugin = {\n  SQLiteFactory: SQLiteFactory,\n  SQLitePluginTransaction: SQLitePluginTransaction,\n  SQLitePlugin: SQLitePlugin,\n  log: plugin.log\n};\nmodule.exports = plugin.sqlitePlugin;","map":{"version":3,"names":["NativeModules","require","DB_STATE_INIT","DB_STATE_OPEN","READ_ONLY_REGEX","SQLiteFactory","SQLitePlugin","SQLitePluginTransaction","argsArray","dblocations","newSQLError","txLocks","plugin","error","code","sqlError","Error","message","JSON","stringify","nextTick","setImmediate","fun","setTimeout","global","window","args","i","len","arguments","length","call","exec","method","options","success","sqlitePlugin","DEBUG","log","console","warn","openargs","openSuccess","openError","dbname","name","e","open","prototype","databaseFeatures","isSQLitePluginDatabase","openDBs","addTransaction","t","queue","inProgress","push","startNextTransaction","transaction","fn","readTransaction","self","_this","txLock","shift","start","abortAllPendingTransactions","j","len1","ref","tx","abortFromQ","sqlBatch","sqlStatements","batchList","myfn","st","constructor","Array","sql","params","elem","k","len2","results","addStatement","mysuccess","myerror","openerrorcb","opensuccesscb","close","r","path","err","attach","dbNameToAttach","dbAlias","dbName","detach","executeSql","statement","db","txlock","readOnly","executes","run","_error","values","that","finalized","test","handleStatementFailure","sqlStatement","v","toString","errorMsg","handleStatementSuccess","handler","response","payload","rows","item","raw","slice","rowsAffected","insertId","batchExecutes","handlerFor","callbacks","request","tropts","txFailure","waiting","index","didSucceed","abort","finish","qid","result","last","q","res","type","dbargs","failed","succeeded","sqlerror","debug","sqliteFeatures","isSQLitePlugin","openDatabase","errorcb","first","okcb","String","dblocation","location","hasOwnProperty","createFromLocation","assetFilename","androidDatabaseImplementation","androidOldDatabaseImplementation","androidLockWorkaround","androidBugWorkaround","echoTest","inputTestValue","testValue","value","deleteDatabase","module","exports"],"sources":["/Users/littlecorn/Documents/lose-weight-apps/node_modules/react-native-sqlite-storage/lib/sqlite.core.js"],"sourcesContent":["/*\n * sqlite.ios.core.js\n *\n * Created by Andrzej Porebski on 10/29/15.\n * Copyright (c) 2015-2016 Andrzej Porebski.\n *\n * This software is largely based on the SQLLite Storage Cordova Plugin created by Chris Brody & Davide Bertola.\n * The implementation was adopted and converted to use React Native bindings.\n *\n * See https://github.com/litehelpers/Cordova-sqlite-storage\n *\n * This library is available under the terms of the MIT License (2008).\n * See http://opensource.org/licenses/alphabetical for full text.\n */\n\nvar NativeModules = require(\"react-native\").NativeModules;\nvar DB_STATE_INIT, DB_STATE_OPEN, READ_ONLY_REGEX, SQLiteFactory, SQLitePlugin, SQLitePluginTransaction, argsArray, dblocations, newSQLError, txLocks;\n\nvar plugin = {};\n\nREAD_ONLY_REGEX = /^(\\s|;)*(?:alter|create|delete|drop|insert|reindex|replace|update)/i;\n\nDB_STATE_INIT = \"INIT\";\n\nDB_STATE_OPEN = \"OPEN\";\n\ntxLocks = {};\n\nnewSQLError = function(error, code) {\n  var sqlError;\n  sqlError = error;\n  if (!code) {\n    code = 0;\n  }\n  if (!sqlError) {\n    sqlError = new Error(\"a plugin had an error but provided no response\");\n    sqlError.code = code;\n  }\n  if (typeof sqlError === \"string\") {\n    sqlError = new Error(error);\n    sqlError.code = code;\n  }\n  if (!sqlError.code && sqlError.message) {\n    sqlError.code = code;\n  }\n  if (!sqlError.code && !sqlError.message) {\n    sqlError = new Error(\"an unknown error was returned: \" + JSON.stringify(sqlError));\n    sqlError.code = code;\n  }\n  return sqlError;\n};\n\nlet nextTick = setImmediate ||  function(fun) {\n  setTimeout(fun, 0);\n};\n\nif (global.window) {\n  nextTick = window.setImmediate || function(fun) {\n    window.setTimeout(fun, 0);\n  };  \n}\n\n/*\n Utility that avoids leaking the arguments object. See\n https://www.npmjs.org/package/argsarray\n */\n\nargsArray = function(fun) {\n  return function() {\n    var args, i, len;\n    len = arguments.length;\n    if (len) {\n      args = [];\n      i = -1;\n      while (++i < len) {\n        args[i] = arguments[i];\n      }\n      return fun.call(this, args);\n    } else {\n      return fun.call(this, []);\n    }\n  };\n};\n\nplugin.exec = function(method, options, success, error) {\n  if (plugin.sqlitePlugin.DEBUG){\n    plugin.log(\"SQLite.\" + method + \"(\" + JSON.stringify(options) + \")\");\n  }\n  NativeModules[\"SQLite\"][method](options,success,error);\n};\n\nplugin.log = function(...messages) {\n  if (plugin.sqlitePlugin.DEBUG) {\n    console.log(...messages)\n  }\n}\n\nplugin.warn = function(...messages) {\n  console.warn(...messages)\n}\n\nplugin.error = function(...messages) {\n  console.error(...messages)\n}\n\nSQLitePlugin = function(openargs, openSuccess, openError) {\n  var dbname;\n  if (!(openargs && openargs[\"name\"])) {\n    throw newSQLError(\"Cannot create a SQLitePlugin db instance without a db name\");\n  }\n  dbname = openargs.name;\n  if (typeof dbname !== \"string\") {\n    throw newSQLError(\"sqlite plugin database name must be a string\");\n  }\n  this.openargs = openargs;\n  this.dbname = dbname;\n  this.openSuccess = openSuccess;\n  this.openError = openError;\n  this.openSuccess || (this.openSuccess = function() {\n    plugin.log(\"DB opened: \" + dbname);\n  });\n  this.openError || (this.openError = function(e) {\n    plugin.log(e.message);\n  });\n  this.open(this.openSuccess, this.openError);\n};\n\nSQLitePlugin.prototype.databaseFeatures = {\n  isSQLitePluginDatabase: true\n};\n\nSQLitePlugin.prototype.openDBs = {};\n\nSQLitePlugin.prototype.addTransaction = function(t) {\n  if (!txLocks[this.dbname]) {\n    txLocks[this.dbname] = {\n      queue: [],\n      inProgress: false\n    };\n  }\n  txLocks[this.dbname].queue.push(t);\n  if (this.dbname in this.openDBs && this.openDBs[this.dbname] !== DB_STATE_INIT) {\n    this.startNextTransaction();\n  } else {\n    if (this.dbname in this.openDBs) {\n      plugin.log(\"new transaction is waiting for open operation\");\n    } else {\n      plugin.log(\"database is closed, new transaction is [stuck] waiting until db is opened again!\");\n    }\n  }\n};\n\nSQLitePlugin.prototype.transaction = function(fn, error, success) {\n  if (!this.openDBs[this.dbname]) {\n    error(newSQLError(\"database not open\"));\n    return;\n  }\n  this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, true, false));\n};\n\nSQLitePlugin.prototype.readTransaction = function(fn, error, success) {\n  if (!this.openDBs[this.dbname]) {\n    error(newSQLError(\"database not open\"));\n    return;\n  }\n  this.addTransaction(new SQLitePluginTransaction(this, fn, error, success, false, true));\n};\n\nSQLitePlugin.prototype.startNextTransaction = function() {\n  var self;\n  self = this;\n  nextTick((function(_this) {\n    return function() {\n      var txLock;\n      if (!(_this.dbname in _this.openDBs) || _this.openDBs[_this.dbname] !== DB_STATE_OPEN) {\n        plugin.log(\"cannot start next transaction: database not open\");\n        return;\n      }\n      txLock = txLocks[self.dbname];\n      if (!txLock) {\n        plugin.log(\"cannot start next transaction: database connection is lost\");\n      } else if (txLock.queue.length > 0 && !txLock.inProgress) {\n        txLock.inProgress = true;\n        txLock.queue.shift().start();\n      }\n    };\n  })(this));\n};\n\nSQLitePlugin.prototype.abortAllPendingTransactions = function() {\n  var j, len1, ref, tx, txLock;\n  txLock = txLocks[this.dbname];\n  if (!!txLock && txLock.queue.length > 0) {\n    ref = txLock.queue;\n    for (j = 0, len1 = ref.length; j < len1; j++) {\n      tx = ref[j];\n      tx.abortFromQ(newSQLError(\"Invalid database handle\"));\n    }\n    txLock.queue = [];\n    txLock.inProgress = false;\n  }\n};\n\nSQLitePlugin.prototype.sqlBatch = function(sqlStatements, success, error) {\n  var batchList, j, len1, myfn, st;\n  if (!sqlStatements || sqlStatements.constructor !== Array) {\n    throw newSQLError(\"sqlBatch expects an array\");\n  }\n  batchList = [];\n  for (j = 0, len1 = sqlStatements.length; j < len1; j++) {\n    st = sqlStatements[j];\n    if (st.constructor === Array) {\n      if (st.length === 0) {\n        throw newSQLError(\"sqlBatch array element of zero (0) length\");\n      }\n      batchList.push({\n        sql: st[0],\n        params: st.length === 0 ? [] : st[1]\n      });\n    } else {\n      batchList.push({\n        sql: st,\n        params: []\n      });\n    }\n  }\n  myfn = function(tx) {\n    var elem, k, len2, results;\n    results = [];\n    for (k = 0, len2 = batchList.length; k < len2; k++) {\n      elem = batchList[k];\n      results.push(tx.addStatement(elem.sql, elem.params, null, null));\n    }\n    return results;\n  };\n  let mysuccess = function() {\n    if (!!success) {\n      return success();\n    }\n  };\n  let myerror = function(e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \",e);\n    }\n  };\n\n  this.addTransaction(new SQLitePluginTransaction(this, myfn, myerror, mysuccess, true, false));\n};\n\n\nSQLitePlugin.prototype.open = function(success, error) {\n  var openerrorcb, opensuccesscb;\n\n  if (this.dbname in this.openDBs && this.openDBs[this.dbname] === DB_STATE_OPEN) {\n    plugin.log(\"database already open: \" + this.dbname);\n    nextTick((function(_this) {\n      return function() {\n        success(_this);\n      };\n    })(this));\n  } else {\n    plugin.log(\"OPEN database: \" + this.dbname);\n    opensuccesscb = (function(_this) {\n      return function() {\n        var txLock;\n        if (!_this.openDBs[_this.dbname]) {\n          plugin.log(\"database was closed during open operation\");\n        }\n        if (_this.dbname in _this.openDBs) {\n          _this.openDBs[_this.dbname] = DB_STATE_OPEN;\n        }\n        if (!!success) {\n          success(_this);\n        }\n        txLock = txLocks[_this.dbname];\n        if (!!txLock && txLock.queue.length > 0 && !txLock.inProgress) {\n          _this.startNextTransaction();\n        }\n      };\n    })(this);\n    openerrorcb = (function(_this) {\n      return function() {\n        plugin.log(\"OPEN database: \" + _this.dbname + \" failed, aborting any pending transactions\");\n        if (!!error) {\n          error(newSQLError(\"Could not open database\"));\n        }\n        delete _this.openDBs[_this.dbname];\n        _this.abortAllPendingTransactions();\n      };\n    })(this);\n    this.openDBs[this.dbname] = DB_STATE_INIT;\n    plugin.exec(\"open\",this.openargs,opensuccesscb, openerrorcb);\n  }\n};\n\nSQLitePlugin.prototype.close = function(success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot close: transaction is in progress\");\n      error(newSQLError(\"database cannot be closed while a transaction is in progress\"));\n      return;\n    }\n    plugin.log(\"CLOSE database: \" + this.dbname);\n    delete this.openDBs[this.dbname];\n    if (txLocks[this.dbname]) {\n      plugin.log(\"closing db with transaction queue length: \" + txLocks[this.dbname].queue.length);\n    } else {\n      plugin.log(\"closing db with no transaction lock state\");\n    }\n    let mysuccess = function(t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n    let myerror = function(t, e) {\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \",e);\n      }\n    };\n    plugin.exec(\"close\",{path: this.dbname}, mysuccess, myerror);\n  } else {\n    var err = \"cannot close: database is not open\";\n    plugin.log(err);\n    if (error) {\n      nextTick(function() {\n        return error(err);\n      });\n    }\n  }\n};\n\nSQLitePlugin.prototype.attach = function(dbNameToAttach, dbAlias, success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot attach: transaction is in progress\");\n      error(newSQLError(\"database cannot be attached while a transaction is in progress\"));\n      return;\n    }\n    plugin.log(\"ATTACH database \" + dbNameToAttach + \" to \" + this.dbname + \" with alias \" + dbAlias);\n\n    let mysuccess = function(t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n    let myerror = function(e) {\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \",e);\n      }\n    };\n    plugin.exec(\"attach\",{path: this.dbname, dbName: dbNameToAttach, dbAlias}, mysuccess, myerror);\n  } else {\n    let err = \"cannot attach: database is not open\";\n    if (error) {\n      nextTick(function() {\n        return error(err);\n      });\n    }\n  }\n};\n\nSQLitePlugin.prototype.detach = function(dbAlias, success, error) {\n  if (this.dbname in this.openDBs) {\n    if (txLocks[this.dbname] && txLocks[this.dbname].inProgress) {\n      plugin.log(\"cannot attach: transaction is in progress\");\n      error(newSQLError(\"database cannot be attached while a transaction is in progress\"));\n      return;\n    }\n    plugin.log(\"DETACH database \" + dbAlias + \" from \" + this.dbname);\n\n    let mysuccess = function(t, r) {\n      if (!!success) {\n        return success(r);\n      }\n    };\n    let myerror = function(e) {\n      plugin.log(\"ERR\", e);\n      if (!!error) {\n        return error(e);\n      } else {\n        plugin.log(\"Error handler not provided: \",e);\n      }\n    };\n    this.executeSql(\"DETACH DATABASE \" + dbAlias, [], mysuccess, myerror)\n  } else {\n    var err = \"cannot attach: database is not open\";\n    plugin.log(err);\n    if (error) {\n      nextTick(function() {\n        return error(err);\n      });\n    }\n  }\n};\n\nSQLitePlugin.prototype.executeSql = function(statement, params, success, error) {\n  var myerror, myfn, mysuccess;\n  mysuccess = function(t, r) {\n    if (!!success) {\n      return success(r);\n    }\n  };\n  myerror = function(t, e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \",e);\n    }\n  };\n  myfn = function(tx) {\n    tx.addStatement(statement, params, mysuccess, myerror);\n  };\n  this.addTransaction(new SQLitePluginTransaction(this, myfn, null, null, false, false));\n};\n\nSQLitePluginTransaction = function(db, fn, error, success, txlock, readOnly) {\n  if (typeof fn !== \"function\") {\n    /*\n     This is consistent with the implementation in Chrome -- it\n     throws if you pass anything other than a function. This also\n     prevents us from stalling our txQueue if somebody passes a\n     false value for fn.\n     */\n    let err = newSQLError(\"transaction expected a function\");\n    if (!!error) {\n      return error(err);\n    } else {\n      throw err;\n    }\n  }\n  this.db = db;\n  this.fn = fn;\n  this.error = error;\n  this.success = success;\n  this.txlock = txlock;\n  this.readOnly = readOnly;\n  this.executes = [];\n  if (txlock) {\n    this.addStatement(\"BEGIN\", [], null, function(tx, err) {\n      throw newSQLError(\"unable to begin transaction: \" + err.message, err.code);\n    });\n  } else {\n    this.addStatement(\"SELECT 1\", [], null, null);\n  }\n};\n\nSQLitePluginTransaction.prototype.start = function() {\n  var err;\n  try {\n    this.fn(this);\n    this.run();\n  } catch (_error) {\n    err = _error;\n    txLocks[this.db.dbname].inProgress = false;\n    this.db.startNextTransaction();\n    if (this.error) {\n      this.error(newSQLError(err));\n    }\n  }\n};\n\nSQLitePluginTransaction.prototype.executeSql = function(sql, values, success, error) {\n  var that = this;\n  if (that.finalized) {\n    throw {\n      message: \"InvalidStateError: DOM Exception 11: This transaction is already finalized. Transactions are committed\" +\n      \" after its success or failure handlers are called. If you are using a Promise to handle callbacks, be aware that\" +\n      \" implementations following the A+ standard adhere to run-to-completion semantics and so Promise resolution occurs\" +\n      \" on a subsequent tick and therefore after the transaction commits.\",\n      code: 11\n    };\n  }\n  if (that.readOnly && READ_ONLY_REGEX.test(sql)) {\n    that.handleStatementFailure(error, {\n      message: \"invalid sql for a read-only transaction\"\n    });\n    return;\n  }\n  let mysuccess = function(t, r) {\n    if (!!success) {\n      return success(t,r);\n    }\n  };\n  let myerror = function(t, e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"Error handler not provided: \",e);\n    }\n  };\n  that.addStatement(sql, values, mysuccess, myerror);\n};\n\nSQLitePluginTransaction.prototype.addStatement = function(sql, values, success, error) {\n  var j, len1, params, sqlStatement, t, v;\n  sqlStatement = typeof sql === \"string\" ? sql : sql.toString();\n  params = [];\n  if (!!values && values.constructor === Array) {\n    for (j = 0, len1 = values.length; j < len1; j++) {\n      v = values[j];\n      t = typeof v;\n      if (v === null || v === void 0 || t === \"number\" || t === \"string\"){\n        params.push(v);\n      } else if (t === \"boolean\") {\n        //Convert true -> 1 / false -> 0\n        params.push(~~v);\n      }\n      else if (t !== \"function\") {\n        params.push(v.toString());\n        plugin.warn(\"addStatement - parameter of type <\"+t+\"> converted to string using toString()\")\n      } else {\n        let errorMsg = \"Unsupported parameter type <\"+t+\"> found in addStatement()\";\n        plugin.error(errorMsg);\n        error(newSQLError(errorMsg));\n        return;\n      }\n    }\n  }\n  this.executes.push({\n    success: success,\n    error: error,\n    sql: sqlStatement,\n    params: params\n  });\n};\n\nSQLitePluginTransaction.prototype.handleStatementSuccess = function(handler, response) {\n  // plugin.log(\"handler response:\",response,response.rows);\n  var payload, rows;\n  if (!handler) {\n    return;\n  }\n  rows = response.rows || [];\n  // plugin.log(\"handler rows now:\",rows);\n  payload = {\n    rows: {\n      item: function(i) {\n        return rows[i];\n      },\n      /**\n       * non-standard Web SQL Database method to expose a copy of raw results\n       * @return {Array}\n       */\n      raw: function() {\n        return rows.slice();\n      },\n      length: rows.length\n    },\n    rowsAffected: response.rowsAffected || 0,\n    insertId: response.insertId || void 0\n  };\n  // plugin.log(\"handler response payload:\",payload);\n  handler(this, payload);\n};\n\nSQLitePluginTransaction.prototype.handleStatementFailure = function(handler, response) {\n  if (!handler) {\n    throw newSQLError(\"a statement with no error handler failed: \" + response.message, response.code);\n  }\n  if (handler(this, response) !== false) {\n    throw newSQLError(\"a statement error callback did not return false: \" + response.message, response.code);\n  }\n};\n\nSQLitePluginTransaction.prototype.run = function() {\n  var batchExecutes, handlerFor, i, callbacks, request, tropts, tx, txFailure, waiting;\n  txFailure = null;\n  tropts = [];\n  batchExecutes = this.executes;\n  waiting = batchExecutes.length;\n  this.executes = [];\n  tx = this;\n  handlerFor = function(index, didSucceed) {\n    return function(response) {\n      if (!txFailure) {\n        try {\n          if (didSucceed) {\n            tx.handleStatementSuccess(batchExecutes[index].success, response);\n          } else {\n            tx.handleStatementFailure(batchExecutes[index].error, newSQLError(response));\n          }\n        } catch (err) {\n          let errorMsg = JSON.stringify(err);\n          if(errorMsg === \"{}\") errorMsg = err.toString();\n          plugin.log(\"warning - exception while invoking a callback: \" + errorMsg);\n        }\n\n        if (!didSucceed) {\n          txFailure = newSQLError(response);\n        }\n      }\n      if (--waiting === 0) {\n        if (txFailure) {\n          tx.executes = [];\n          tx.abort(txFailure);\n        } else if (tx.executes.length > 0) {\n          tx.run();\n        } else {\n          tx.finish();\n        }\n      }\n    };\n  };\n  \n  i = 0;\n  callbacks = [];\n  while (i < batchExecutes.length) {\n    request = batchExecutes[i];\n    callbacks.push({\n      success: handlerFor(i, true),\n      error: handlerFor(i, false)\n    });\n    tropts.push({\n      qid: 1111,\n      sql: request.sql,\n      params: request.params\n    });\n    i++;\n  }\n\n  let mysuccess = function(result) {\n    var j, last, q, r, res, type;\n    if (result.length === 0){\n      return;\n    }\n    last = result.length - 1;\n    for (j = 0; j <= last; ++j) {\n      r = result[j];\n      type = r.type;\n      res = r.result;\n      q = callbacks[j];\n      if (q) {\n        if (q[type]) {\n          q[type](res);\n        }\n      }\n    }\n  };\n\n  var myerror = function(error) {\n    plugin.log(\"batch execution error: \",error);\n  };\n\n  plugin.exec(\"backgroundExecuteSqlBatch\",{\n    dbargs: {\n      dbname: this.db.dbname\n    },\n    executes: tropts\n  }, mysuccess, myerror);\n};\n\nSQLitePluginTransaction.prototype.abort = function(txFailure) {\n  var failed, succeeded, tx;\n  if (this.finalized) {\n    return;\n  }\n  tx = this;\n  succeeded = function(tx) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.error) {\n      tx.error(txFailure);\n    }\n  };\n  failed = function(tx, err) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.error) {\n      tx.error(newSQLError(\"error while trying to roll back: \" + err.message, err.code));\n    }\n  };\n  this.finalized = true;\n  if (this.txlock) {\n    this.addStatement(\"ROLLBACK\", [], succeeded, failed);\n    this.run();\n  } else {\n    succeeded(tx);\n  }\n};\n\nSQLitePluginTransaction.prototype.finish = function() {\n  var failed, succeeded, tx;\n  if (this.finalized) {\n    return;\n  }\n  tx = this;\n  succeeded = function(tx) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.success) {\n      tx.success();\n    }\n  };\n  failed = function(tx, err) {\n    txLocks[tx.db.dbname].inProgress = false;\n    tx.db.startNextTransaction();\n    if (tx.error) {\n      tx.error(newSQLError(\"error while trying to commit: \" + err.message, err.code));\n    }\n  };\n  this.finalized = true;\n  if (this.txlock) {\n    this.addStatement(\"COMMIT\", [], succeeded, failed);\n    this.run();\n  } else {\n    succeeded(tx);\n  }\n};\n\nSQLitePluginTransaction.prototype.abortFromQ = function(sqlerror) {\n  if (this.error) {\n    this.error(sqlerror);\n  }\n};\n\ndblocations = {\n  \"default\" : \"nosync\",\n  \"Documents\" : \"docs\",\n  \"Library\" : \"libs\",\n  \"Shared\" : \"shared\"\n};\n\nSQLiteFactory = function(){};\n\nSQLiteFactory.prototype.DEBUG = function(debug) {\n  plugin.log(\"Setting debug to:\",debug);\n  plugin.sqlitePlugin.DEBUG = debug;\n};\n\nSQLiteFactory.prototype.sqliteFeatures = function() {\n  return {\n    isSQLitePlugin: true\n  };\n};\n\nSQLiteFactory.prototype.openDatabase = argsArray(function(args) {\n  var errorcb, first, okcb, openargs, readOnly;\n  if (args.length < 1) {\n    return null;\n  }\n  first = args[0];\n  openargs = null;\n  okcb = errorcb = () => {};\n  if (first.constructor === String) {\n    openargs = {\n      name: first,\n      dblocation : dblocations[\"default\"]\n    };\n    if (args.length >= 5) {\n      okcb = args[4];\n      if (args.length > 5) {\n        errorcb = args[5];\n      }\n    }\n  } else {\n    openargs = first;\n    readOnly = !!openargs.readOnly;\n    if (!readOnly && (!openargs.location || openargs.location.constructor !== String || !dblocations.hasOwnProperty(openargs.location))) {\n      openargs.dblocation = dblocations[\"default\"];\n    } else {\n      openargs.dblocation = dblocations[openargs.location];\n    }\n\n    if (!!openargs.createFromLocation) {\n      if (openargs.createFromLocation === 1) {\n        openargs.assetFilename = \"1\";\n      } else if (typeof openargs.createFromLocation === \"string\"){\n        openargs.assetFilename = openargs.createFromLocation;\n      }\n    }\n\n    if (!!openargs.androidDatabaseImplementation && openargs.androidDatabaseImplementation === 2) {\n      openargs.androidOldDatabaseImplementation = 1;\n    }\n\n    if (!!openargs.androidLockWorkaround && openargs.androidLockWorkaround === 1) {\n      openargs.androidBugWorkaround = 1;\n    }\n\n    if (args.length >= 2) {\n      okcb = args[1];\n      if (args.length > 2) {\n        errorcb = args[2];\n      }\n    }\n  }\n\n  return new SQLitePlugin(openargs, okcb, errorcb);\n});\n\nSQLiteFactory.prototype.echoTest = function(success, error) {\n  let inputTestValue = \"test-string\";\n  let mysuccess = function(testValue) {\n    if (testValue === inputTestValue) {\n      return success();\n    } else {\n      return error(`Mismatch: got: ${testValue} , expected: ${inputTestValue}`);\n    }\n  };\n  let myerror = function(e) {\n    return error(e);\n  };\n\n  plugin.exec(\"echoStringValue\",{value: inputTestValue}, mysuccess, myerror);\n};\n\nSQLiteFactory.prototype.deleteDatabase = function(first,success, error) {\n  var args = {};\n  if (first.constructor === String) {\n    args.path = first;\n    args.dblocation = dblocations[\"default\"];\n  } else {\n    if (!(first && first[\"name\"])) {\n      throw new Error(\"Please specify db name via name property\");\n    }\n    args.path = first.name;\n    if (!first.location || first.location.constructor !== String || !dblocations.hasOwnProperty(first.location)) {\n      args.dblocation = dblocations[\"default\"];\n    } else {\n      args.dblocation = dblocations[first.location];\n    }\n  }\n\n  let mysuccess = function(r) {\n    delete SQLitePlugin.prototype.openDBs[args.path];\n    if (!!success) {\n      return success(r);\n    }\n  };\n\n  let myerror = function(e) {\n    if (!!error) {\n      return error(e);\n    } else {\n      plugin.log(\"deleteDatabase error handler not provided: \",e);\n    }\n  };\n\n  plugin.exec(\"delete\",args,mysuccess,myerror);\n};\n\nplugin.sqlitePlugin = {\n  SQLiteFactory : SQLiteFactory,\n  SQLitePluginTransaction : SQLitePluginTransaction,\n  SQLitePlugin : SQLitePlugin,\n  log: plugin.log\n};\n\nmodule.exports = plugin.sqlitePlugin;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}