{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from \"expo-sqlite\";\nexport var getDBConnection = function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", SQLite.openDatabase('dictionary.db'));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createTable = function _callee2(db) {\n  var history, insert, bookmark;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          history = \"CREATE TABLE IF NOT EXISTS history(\\n        word TEXT NOT NULL\\n        order INT\\n    );\";\n          insert = \"INSERT INTO history (word,order) VALUES('alien',1)\";\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(db.executeSql(history));\n\n        case 4:\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(db.executeSql(insert));\n\n        case 6:\n          bookmark = \"CREATE TABLE IF NOT EXISTS bookmark(\\n    word TEXT NOT NULL\\n    order INT\\n);\";\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(db.executeSql(bookmark));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordHistory = function _callee3(db) {\n  var wordHistory, results;\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          wordHistory = [];\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(db.executeSql(\"SELECT rowid as id,word,order FROM history\"));\n\n        case 4:\n          results = _context3.sent;\n          results.forEach(function (result) {\n            for (var index = 0; index < result.rows.length; index++) {\n              wordHistory.push(result.rows.item(index));\n            }\n          });\n          console.log('word', wordHistory);\n          return _context3.abrupt(\"return\", wordHistory);\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          throw Error('Failed to get WordHistory !!!');\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};","map":{"version":3,"names":["SQLite","getDBConnection","openDatabase","createTable","db","history","insert","executeSql","bookmark","getWordHistory","wordHistory","results","forEach","result","index","rows","length","push","item","console","log","error","Error"],"sources":["/Users/littlecorn/Documents/lose-weight-apps/db.tsx"],"sourcesContent":["import * as SQLite from \"expo-sqlite\";\n\nexport const getDBConnection = async () => {\n  return SQLite.openDatabase('dictionary.db');\n};\n\nexport const createTable = async (db: SQLiteDatabase) => {\n  // create table if not exists\n  const history = `CREATE TABLE IF NOT EXISTS history(\n        word TEXT NOT NULL\n        order INT\n    );`;\n    const insert = `INSERT INTO history (word,order) VALUES('alien',1)`;\n  await db.executeSql(history);\n  await db.executeSql(insert);\n  const bookmark = `CREATE TABLE IF NOT EXISTS bookmark(\n    word TEXT NOT NULL\n    order INT\n);`; \nawait db.executeSql(bookmark);\n};\n\nexport const getWordHistory = async (db: SQLiteDatabase): Promise<[]> => {\n    try {\n      let wordHistory = [] as any;\n      const results = await db.executeSql(`SELECT rowid as id,word,order FROM history`);\n      results.forEach(result => {\n        for (let index = 0; index < result.rows.length; index++) {\n            wordHistory.push(result.rows.item(index))\n        }\n      });\n      console.log('word',wordHistory);\n      return wordHistory;\n    } catch (error) {\n      console.error(error);\n      throw Error('Failed to get WordHistory !!!');\n    }\n};"],"mappings":";AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AAEA,OAAO,IAAMC,eAAe,GAAG;EAAA;IAAA;MAAA;QAAA;UAAA,iCACtBD,MAAM,CAACE,YAAP,CAAoB,eAApB,CADsB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAxB;AAIP,OAAO,IAAMC,WAAW,GAAG,kBAAOC,EAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAEnBC,OAFmB;UAMjBC,MANiB;UAAA;UAAA,iCAOnBF,EAAE,CAACG,UAAH,CAAcF,OAAd,CAPmB;;QAAA;UAAA;UAAA,iCAQnBD,EAAE,CAACG,UAAH,CAAcD,MAAd,CARmB;;QAAA;UASnBE,QATmB;UAAA;UAAA,iCAarBJ,EAAE,CAACG,UAAH,CAAcC,QAAd,CAbqB;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAApB;AAgBP,OAAO,IAAMC,cAAc,GAAG,kBAAOL,EAAP;EAAA;EAAA;IAAA;MAAA;QAAA;UAAA;UAEpBM,WAFoB,GAEN,EAFM;UAAA;UAAA,iCAGFN,EAAE,CAACG,UAAH,8CAHE;;QAAA;UAGlBI,OAHkB;UAIxBA,OAAO,CAACC,OAAR,CAAgB,UAAAC,MAAM,EAAI;YACxB,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,MAAM,CAACE,IAAP,CAAYC,MAAxC,EAAgDF,KAAK,EAArD,EAAyD;cACrDJ,WAAW,CAACO,IAAZ,CAAiBJ,MAAM,CAACE,IAAP,CAAYG,IAAZ,CAAiBJ,KAAjB,CAAjB;YACH;UACF,CAJD;UAKAK,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBV,WAAnB;UATwB,kCAUjBA,WAViB;;QAAA;UAAA;UAAA;UAYxBS,OAAO,CAACE,KAAR;UAZwB,MAalBC,KAAK,CAAC,+BAAD,CAba;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAvB"},"metadata":{},"sourceType":"module"}