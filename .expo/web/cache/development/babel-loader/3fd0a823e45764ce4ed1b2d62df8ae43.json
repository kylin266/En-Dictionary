{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from \"expo-sqlite\";\nexport var openDatabase = function openDatabase() {\n  return _regeneratorRuntime.async(function openDatabase$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", SQLite.openDatabase('dictionary2.db'));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createTable = function createTable(db) {\n  var history, bookmark, note, clearData, clearData2;\n  return _regeneratorRuntime.async(function createTable$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          history = \"CREATE TABLE IF NOT EXISTS history (\\n            word TEXT NOT NULL,\\n            location INT AUTO INCREMENT NOT NULL\\n        );\";\n          _context6.next = 3;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee(tx) {\n            return _regeneratorRuntime.async(function _callee$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(history));\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 3:\n          bookmark = \"CREATE TABLE IF NOT EXISTS bookmark (\\n            word TEXT NOT NULL\\n        );\";\n          _context6.next = 6;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee2(tx) {\n            return _regeneratorRuntime.async(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(bookmark));\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 6:\n          note = \"CREATE TABLE IF NOT EXISTS note (\\n        word TEXT NOT NULL\\n        note TEXT NOT NULL\\n    );\";\n          console.log('created');\n          clearData = 'DELETE FROM history';\n          _context6.next = 11;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee3(tx) {\n            return _regeneratorRuntime.async(function _callee3$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(clearData));\n\n                  case 2:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 11:\n          clearData2 = 'DELETE FROM bookmark';\n          _context6.next = 14;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee4(tx) {\n            return _regeneratorRuntime.async(function _callee4$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(clearData2));\n\n                  case 2:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 14:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordHistory = function getWordHistory(db) {\n  var query;\n  return _regeneratorRuntime.async(function getWordHistory$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          query = \"SELECT * FROM history\";\n          return _context9.abrupt(\"return\", new Promise(function _callee6(resolve) {\n            return _regeneratorRuntime.async(function _callee6$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    _context8.next = 2;\n                    return _regeneratorRuntime.awrap(db.transaction(function _callee5(tx) {\n                      return _regeneratorRuntime.async(function _callee5$(_context7) {\n                        while (1) {\n                          switch (_context7.prev = _context7.next) {\n                            case 0:\n                              _context7.next = 2;\n                              return _regeneratorRuntime.awrap(tx.executeSql(query, null, function (tx, resultSet) {\n                                var data = [];\n\n                                for (var i = 0, c = resultSet.rows.length; i < c; i++) {\n                                  data.push(resultSet.rows.item(i));\n                                }\n\n                                resolve(data);\n                              }, function (tx, error) {\n                                console.log(error.message);\n                              }));\n\n                            case 2:\n                            case \"end\":\n                              return _context7.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    }));\n\n                  case 2:\n                    return _context8.abrupt(\"return\", _context8.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordBookmark = function getWordBookmark(db) {\n  var query;\n  return _regeneratorRuntime.async(function getWordBookmark$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          query = \"SELECT * FROM bookmark\";\n          return _context12.abrupt(\"return\", new Promise(function _callee8(resolve) {\n            return _regeneratorRuntime.async(function _callee8$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.next = 2;\n                    return _regeneratorRuntime.awrap(db.transaction(function _callee7(tx) {\n                      return _regeneratorRuntime.async(function _callee7$(_context10) {\n                        while (1) {\n                          switch (_context10.prev = _context10.next) {\n                            case 0:\n                              _context10.next = 2;\n                              return _regeneratorRuntime.awrap(tx.executeSql(query, null, function (tx, resultSet) {\n                                var data = [];\n\n                                for (var i = 0, c = resultSet.rows.length; i < c; i++) {\n                                  data.push(resultSet.rows.item(i));\n                                }\n\n                                resolve(data);\n                              }, function (tx, error) {\n                                console.log(error.message);\n                              }));\n\n                            case 2:\n                            case \"end\":\n                              return _context10.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    }));\n\n                  case 2:\n                    return _context11.abrupt(\"return\", _context11.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordHistoryByLocation = function getWordHistoryByLocation(db) {\n  var query;\n  return _regeneratorRuntime.async(function getWordHistoryByLocation$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          query = \"SELECT * FROM history Order by location DESC\";\n          return _context15.abrupt(\"return\", new Promise(function _callee10(resolve) {\n            return _regeneratorRuntime.async(function _callee10$(_context14) {\n              while (1) {\n                switch (_context14.prev = _context14.next) {\n                  case 0:\n                    _context14.next = 2;\n                    return _regeneratorRuntime.awrap(db.transaction(function _callee9(tx) {\n                      return _regeneratorRuntime.async(function _callee9$(_context13) {\n                        while (1) {\n                          switch (_context13.prev = _context13.next) {\n                            case 0:\n                              _context13.next = 2;\n                              return _regeneratorRuntime.awrap(tx.executeSql(query, null, function (tx, resultSet) {\n                                var data = [];\n\n                                for (var i = 0, c = resultSet.rows.length; i < c; i++) {\n                                  data.push(resultSet.rows.item(i));\n                                }\n\n                                resolve(data);\n                              }, function (tx, error) {\n                                console.log(error.message);\n                              }));\n\n                            case 2:\n                            case \"end\":\n                              return _context13.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    }));\n\n                  case 2:\n                    return _context14.abrupt(\"return\", _context14.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context14.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordNoteByWord = function getWordNoteByWord(db, word) {\n  var query;\n  return _regeneratorRuntime.async(function getWordNoteByWord$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          query = \"SELECT * FROM note WHERE word = '\" + word + \"'\";\n          return _context18.abrupt(\"return\", new Promise(function _callee12(resolve) {\n            return _regeneratorRuntime.async(function _callee12$(_context17) {\n              while (1) {\n                switch (_context17.prev = _context17.next) {\n                  case 0:\n                    _context17.next = 2;\n                    return _regeneratorRuntime.awrap(db.transaction(function _callee11(tx) {\n                      return _regeneratorRuntime.async(function _callee11$(_context16) {\n                        while (1) {\n                          switch (_context16.prev = _context16.next) {\n                            case 0:\n                              _context16.next = 2;\n                              return _regeneratorRuntime.awrap(tx.executeSql(query, null, function (tx, resultSet) {\n                                var data = [];\n\n                                for (var i = 0, c = resultSet.rows.length; i < c; i++) {\n                                  data.push(resultSet.rows.item(i));\n                                }\n\n                                resolve(data[0]);\n                              }, function (tx, error) {\n                                console.log(error.message);\n                              }));\n\n                            case 2:\n                            case \"end\":\n                              return _context16.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    }));\n\n                  case 2:\n                    return _context17.abrupt(\"return\", _context17.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context17.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordHistoryByWord = function getWordHistoryByWord(db, word) {\n  var query;\n  return _regeneratorRuntime.async(function getWordHistoryByWord$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          query = \"SELECT * FROM history WHERE word = '\" + word + \"'\";\n          return _context21.abrupt(\"return\", new Promise(function _callee14(resolve) {\n            return _regeneratorRuntime.async(function _callee14$(_context20) {\n              while (1) {\n                switch (_context20.prev = _context20.next) {\n                  case 0:\n                    _context20.next = 2;\n                    return _regeneratorRuntime.awrap(db.transaction(function _callee13(tx) {\n                      return _regeneratorRuntime.async(function _callee13$(_context19) {\n                        while (1) {\n                          switch (_context19.prev = _context19.next) {\n                            case 0:\n                              _context19.next = 2;\n                              return _regeneratorRuntime.awrap(tx.executeSql(query, null, function (tx, resultSet) {\n                                var data = [];\n\n                                for (var i = 0, c = resultSet.rows.length; i < c; i++) {\n                                  data.push(resultSet.rows.item(i));\n                                }\n\n                                resolve(data[0]);\n                              }, function (tx, error) {\n                                console.log(error.message);\n                              }));\n\n                            case 2:\n                            case \"end\":\n                              return _context19.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    }));\n\n                  case 2:\n                    return _context20.abrupt(\"return\", _context20.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context20.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordBookmarkByWord = function getWordBookmarkByWord(db, word) {\n  var query;\n  return _regeneratorRuntime.async(function getWordBookmarkByWord$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          query = \"SELECT * FROM bookmark WHERE word = '\" + word + \"'\";\n          return _context24.abrupt(\"return\", new Promise(function _callee16(resolve) {\n            return _regeneratorRuntime.async(function _callee16$(_context23) {\n              while (1) {\n                switch (_context23.prev = _context23.next) {\n                  case 0:\n                    _context23.next = 2;\n                    return _regeneratorRuntime.awrap(db.transaction(function _callee15(tx) {\n                      return _regeneratorRuntime.async(function _callee15$(_context22) {\n                        while (1) {\n                          switch (_context22.prev = _context22.next) {\n                            case 0:\n                              _context22.next = 2;\n                              return _regeneratorRuntime.awrap(tx.executeSql(query, null, function (tx, resultSet) {\n                                var data = [];\n\n                                for (var i = 0, c = resultSet.rows.length; i < c; i++) {\n                                  data.push(resultSet.rows.item(i));\n                                }\n\n                                resolve(data[0]);\n                              }, function (tx, error) {\n                                console.log(error.message);\n                              }));\n\n                            case 2:\n                            case \"end\":\n                              return _context22.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    }));\n\n                  case 2:\n                    return _context23.abrupt(\"return\", _context23.sent);\n\n                  case 3:\n                  case \"end\":\n                    return _context23.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var UpdateWordLocation = function UpdateWordLocation(db, word, location) {\n  var update;\n  return _regeneratorRuntime.async(function UpdateWordLocation$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          update = \"UPDATE history SET location = \" + location + \" WHERE word =  '\" + word + \"'\";\n          _context26.next = 3;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee17(tx) {\n            return _regeneratorRuntime.async(function _callee17$(_context25) {\n              while (1) {\n                switch (_context25.prev = _context25.next) {\n                  case 0:\n                    _context25.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(update));\n\n                  case 2:\n                  case \"end\":\n                    return _context25.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 3:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var UpdateWordNote = function UpdateWordNote(db, word, note) {\n  var update;\n  return _regeneratorRuntime.async(function UpdateWordNote$(_context28) {\n    while (1) {\n      switch (_context28.prev = _context28.next) {\n        case 0:\n          update = \"UPDATE history SET note = \" + note + \" WHERE word =  '\" + word + \"'\";\n          _context28.next = 3;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee18(tx) {\n            return _regeneratorRuntime.async(function _callee18$(_context27) {\n              while (1) {\n                switch (_context27.prev = _context27.next) {\n                  case 0:\n                    _context27.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(update));\n\n                  case 2:\n                  case \"end\":\n                    return _context27.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 3:\n        case \"end\":\n          return _context28.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var insertBookmark = function insertBookmark(db, word) {\n  var insert;\n  return _regeneratorRuntime.async(function insertBookmark$(_context30) {\n    while (1) {\n      switch (_context30.prev = _context30.next) {\n        case 0:\n          insert = \"INSERT INTO bookmark VALUES ('\" + word + \"')\";\n          _context30.next = 3;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee19(tx) {\n            return _regeneratorRuntime.async(function _callee19$(_context29) {\n              while (1) {\n                switch (_context29.prev = _context29.next) {\n                  case 0:\n                    _context29.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(insert));\n\n                  case 2:\n                  case \"end\":\n                    return _context29.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 3:\n        case \"end\":\n          return _context30.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var deleteBookmark = function deleteBookmark(db, word) {\n  var clear;\n  return _regeneratorRuntime.async(function deleteBookmark$(_context32) {\n    while (1) {\n      switch (_context32.prev = _context32.next) {\n        case 0:\n          clear = \"DELETE FROM bookmark WHERE word = '\" + word + \"'\";\n          _context32.next = 3;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee20(tx) {\n            return _regeneratorRuntime.async(function _callee20$(_context31) {\n              while (1) {\n                switch (_context31.prev = _context31.next) {\n                  case 0:\n                    _context31.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(clear));\n\n                  case 2:\n                  case \"end\":\n                    return _context31.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 3:\n        case \"end\":\n          return _context32.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var insertNote = function insertNote(db, word, note) {\n  var insert;\n  return _regeneratorRuntime.async(function insertNote$(_context34) {\n    while (1) {\n      switch (_context34.prev = _context34.next) {\n        case 0:\n          insert = \"INSERT INTO note VALUES ('\" + word + \"','\" + note + \"')\";\n          _context34.next = 3;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee21(tx) {\n            return _regeneratorRuntime.async(function _callee21$(_context33) {\n              while (1) {\n                switch (_context33.prev = _context33.next) {\n                  case 0:\n                    _context33.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(insert));\n\n                  case 2:\n                  case \"end\":\n                    return _context33.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 3:\n        case \"end\":\n          return _context34.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var insertHistory = function insertHistory(db, word, location) {\n  var insert;\n  return _regeneratorRuntime.async(function insertHistory$(_context36) {\n    while (1) {\n      switch (_context36.prev = _context36.next) {\n        case 0:\n          insert = \"INSERT INTO history VALUES ('\" + word + \"',\" + location + \")\";\n          _context36.next = 3;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee22(tx) {\n            return _regeneratorRuntime.async(function _callee22$(_context35) {\n              while (1) {\n                switch (_context35.prev = _context35.next) {\n                  case 0:\n                    _context35.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(insert));\n\n                  case 2:\n                  case \"end\":\n                    return _context35.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 3:\n        case \"end\":\n          return _context36.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var addHistory = function addHistory(db, word) {\n  var data, found;\n  return _regeneratorRuntime.async(function addHistory$(_context37) {\n    while (1) {\n      switch (_context37.prev = _context37.next) {\n        case 0:\n          _context37.next = 2;\n          return _regeneratorRuntime.awrap(getWordHistoryByLocation(db));\n\n        case 2:\n          data = _context37.sent;\n          _context37.next = 5;\n          return _regeneratorRuntime.awrap(getWordHistoryByWord(db, word));\n\n        case 5:\n          found = _context37.sent;\n\n          if (!(data && data.length > 0)) {\n            _context37.next = 16;\n            break;\n          }\n\n          if (!found) {\n            _context37.next = 12;\n            break;\n          }\n\n          _context37.next = 10;\n          return _regeneratorRuntime.awrap(UpdateWordLocation(db, word, data[0].location + 1));\n\n        case 10:\n          _context37.next = 14;\n          break;\n\n        case 12:\n          _context37.next = 14;\n          return _regeneratorRuntime.awrap(insertHistory(db, word, data[0].location + 1));\n\n        case 14:\n          _context37.next = 18;\n          break;\n\n        case 16:\n          _context37.next = 18;\n          return _regeneratorRuntime.awrap(insertHistory(db, word, 1));\n\n        case 18:\n        case \"end\":\n          return _context37.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["SQLite","openDatabase","createTable","db","history","transaction","tx","executeSql","bookmark","note","console","log","clearData","clearData2","getWordHistory","query","Promise","resolve","resultSet","data","i","c","rows","length","push","item","error","message","getWordBookmark","getWordHistoryByLocation","getWordNoteByWord","word","getWordHistoryByWord","getWordBookmarkByWord","UpdateWordLocation","location","update","UpdateWordNote","insertBookmark","insert","deleteBookmark","clear","insertNote","insertHistory","addHistory","found"],"sources":["/Users/littlecorn/Documents/lose-weight-apps/db.tsx"],"sourcesContent":["import * as SQLite from \"expo-sqlite\";\nimport { useState } from \"react\";\n\nexport const openDatabase = async () => {\n    return SQLite.openDatabase('dictionary2.db');\n};\n\nexport const createTable = async (db: any) => {\n    ///create table\n    const history = `CREATE TABLE IF NOT EXISTS history (\n            word TEXT NOT NULL,\n            location INT AUTO INCREMENT NOT NULL\n        );`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(history);\n    });\n\n    const bookmark = `CREATE TABLE IF NOT EXISTS bookmark (\n            word TEXT NOT NULL\n        );`;\n\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(bookmark);\n    });\n\n    const note = `CREATE TABLE IF NOT EXISTS note (\n        word TEXT NOT NULL\n        note TEXT NOT NULL\n    );`;\n    \n\n    console.log('created');\n    // cleardata\n    let clearData = 'DELETE FROM history';\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(clearData);\n    });\n    let clearData2 = 'DELETE FROM bookmark';\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(clearData2);\n    });\n\n\n\n    // const insert = `INSERT INTO history VALUES ('alien',1)`;\n\n    // const insert2 = `INSERT INTO bookmark VALUES ('alkahest')`;\n    // await db.transaction(async (tx: any) => {\n    //     await tx.executeSql(insert);\n    // });\n\n    // await db.transaction(async (tx: any) => {\n    //     await tx.executeSql(insert2);\n    // });\n\n};\n\nexport const getWordHistory = async (db: any) => {\n    const query = `SELECT * FROM history`;\n    return new Promise<any>(async resolve =>\n        await db.transaction(async (tx: any) => {\n            await tx.executeSql(query, null,\n                (tx: any, resultSet: any) => {\n                    let data = [];\n                    for (let i = 0, c = resultSet.rows.length; i < c; i++) {\n                        data.push(resultSet.rows.item(i));\n                    }\n                    resolve(data);\n                },\n                (tx: any, error: any) => {\n                    console.log(error.message);\n                });\n\n        })\n    );\n};\nexport const getWordBookmark = async (db: any) => {\n    const query = `SELECT * FROM bookmark`;\n    return new Promise<any>(async resolve =>\n        await db.transaction(async (tx: any) => {\n            await tx.executeSql(query, null,\n                (tx: any, resultSet: any) => {\n                    let data = [];\n                    for (let i = 0, c = resultSet.rows.length; i < c; i++) {\n                        data.push(resultSet.rows.item(i));\n                    }\n                    resolve(data);\n                },\n                (tx: any, error: any) => {\n                    console.log(error.message);\n                });\n\n        })\n    );\n};\nexport const getWordHistoryByLocation = async (db: any) => {\n    const query = `SELECT * FROM history Order by location DESC`;\n    return new Promise<any>(async resolve =>\n        await db.transaction(async (tx: any) => {\n            await tx.executeSql(query, null,\n                (tx: any, resultSet: any) => {\n                    let data = [];\n                    for (let i = 0, c = resultSet.rows.length; i < c; i++) {\n                        data.push(resultSet.rows.item(i));\n                    }\n                    resolve(data);\n                },\n                (tx: any, error: any) => {\n                    console.log(error.message);\n                });\n\n        })\n    );\n};\nexport const getWordNoteByWord = async (db: any, word: any) => {\n    const query = `SELECT * FROM note WHERE word = '${word}'`;\n    return new Promise<any>(async resolve =>\n        await db.transaction(async (tx: any) => {\n            await tx.executeSql(query, null,\n                (tx: any, resultSet: any) => {\n                    let data = [];\n                    for (let i = 0, c = resultSet.rows.length; i < c; i++) {\n                        data.push(resultSet.rows.item(i));\n                    }\n                    resolve(data[0]);\n                },\n                (tx: any, error: any) => {\n                    console.log(error.message);\n                });\n\n        })\n    );\n};\nexport const getWordHistoryByWord = async (db: any, word: any) => {\n    const query = `SELECT * FROM history WHERE word = '${word}'`;\n    return new Promise<any>(async resolve =>\n        await db.transaction(async (tx: any) => {\n            await tx.executeSql(query, null,\n                (tx: any, resultSet: any) => {\n                    let data = [];\n                    for (let i = 0, c = resultSet.rows.length; i < c; i++) {\n                        data.push(resultSet.rows.item(i));\n                    }\n                    resolve(data[0]);\n                },\n                (tx: any, error: any) => {\n                    console.log(error.message);\n                });\n\n        })\n    );\n};\nexport const getWordBookmarkByWord = async (db: any, word: any) => {\n    const query = `SELECT * FROM bookmark WHERE word = '${word}'`;\n    return new Promise<any>(async resolve =>\n        await db.transaction(async (tx: any) => {\n            await tx.executeSql(query, null,\n                (tx: any, resultSet: any) => {\n                    let data = [];\n                    for (let i = 0, c = resultSet.rows.length; i < c; i++) {\n                        data.push(resultSet.rows.item(i));\n                    }\n                    resolve(data[0]);\n                },\n                (tx: any, error: any) => {\n                    console.log(error.message);\n                });\n\n        })\n    );\n};\n\nexport const UpdateWordLocation = async (db: any, word: any, location: any) => {\n    const update = `UPDATE history SET location = ${location} WHERE word =  '${word}'`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(update);\n    });\n}\nexport const UpdateWordNote = async (db: any, word: any, note: any) => {\n    const update = `UPDATE history SET note = ${note} WHERE word =  '${word}'`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(update);\n    });\n}\nexport const insertBookmark = async (db: any, word: any) => {\n    const insert = `INSERT INTO bookmark VALUES ('${word}')`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(insert);\n    });\n}\nexport const deleteBookmark = async (db: any, word: any) => {\n    const clear = `DELETE FROM bookmark WHERE word = '${word}'`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(clear);\n    });\n}\n\nexport const insertNote = async (db: any, word: any,note: any) => {\n    const insert = `INSERT INTO note VALUES ('${word}','${note}')`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(insert);\n    });\n}\nexport const insertHistory = async (db: any, word: any, location: any) => {\n    const insert = `INSERT INTO history VALUES ('${word}',${location})`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(insert);\n    });\n}\nexport const addHistory = async (db: any, word: any) => {\n    const data = await getWordHistoryByLocation(db);\n    const found = await getWordHistoryByWord(db, word);\n    if (data && data.length > 0) {\n        if (found) {\n            await UpdateWordLocation(db, word, data[0].location + 1);\n        }\n        else {\n            await insertHistory(db, word, data[0].location + 1);\n        }\n    }\n    else {\n        await insertHistory(db, word, 1);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}