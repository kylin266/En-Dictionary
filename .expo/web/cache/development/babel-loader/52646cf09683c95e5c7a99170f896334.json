{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport EditScreenInfo from \"../components/EditScreenInfo\";\nimport { Text, View } from \"../components/Themed\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ModalScreen(props) {\n  var value = props.route.params.value;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var api = \"https://api.dictionaryapi.dev/api/v2/entries/en/\" + value;\n  useEffect(function () {\n    var isMounted = true;\n\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(axios.get(api).then(function (res) {\n                console.log('res', res.data);\n\n                if (res.data) {\n                  if (isMounted) setData(res.data);\n                }\n              }));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n\n    return function () {\n      isMounted = false;\n    };\n  }, []);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: value\n    }), _jsx(View, {\n      style: styles.separator,\n      lightColor: \"#eee\",\n      darkColor: \"rgba(255,255,255,0.1)\"\n    }), _jsx(EditScreenInfo, {\n      path: \"/screens/ModalScreen.tsx\"\n    }), _jsx(StatusBar, {\n      style: Platform.OS === 'ios' ? 'light' : 'auto'\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  }\n});","map":{"version":3,"names":["axios","StatusBar","useEffect","useState","EditScreenInfo","Text","View","ModalScreen","props","value","route","params","data","setData","api","isMounted","get","then","res","console","log","styles","container","title","separator","Platform","OS","StyleSheet","create","flex","alignItems","justifyContent","fontSize","fontWeight","marginVertical","height","width"],"sources":["/Users/littlecorn/Documents/lose-weight-apps/screens/ModalScreen.tsx"],"sourcesContent":["import axios from 'axios';\nimport { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport { Platform, StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function ModalScreen(props: any) {\n  const {value} = props.route.params;\n  const [data,setData] = useState([] as any);\n  const api = `https://api.dictionaryapi.dev/api/v2/entries/en/${value}`\n  useEffect(()=>{\n    let isMounted = true;\n    (async ()=>{\n        await axios.get(api).then(res=>{\n            console.log('res',res.data);\n            if (res.data) {\n            if (isMounted) setData(res.data);\n            }\n        })\n    })();\n    return () => {\n        isMounted = false;\n      };      \n},[])\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>{value}</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/ModalScreen.tsx\" />\n\n      {/* Use a light status bar on iOS to account for the black space above the modal */}\n      <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'} />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;;AAGA,OAAOC,cAAP;AACA,SAASC,IAAT,EAAeC,IAAf;;;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAAiC;EAC9C,IAAOC,KAAP,GAAgBD,KAAK,CAACE,KAAN,CAAYC,MAA5B,CAAOF,KAAP;;EACA,gBAAuBN,QAAQ,CAAC,EAAD,CAA/B;EAAA;EAAA,IAAOS,IAAP;EAAA,IAAYC,OAAZ;;EACA,IAAMC,GAAG,wDAAsDL,KAA/D;EACAP,SAAS,CAAC,YAAI;IACZ,IAAIa,SAAS,GAAG,IAAhB;;IACA,CAAC;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACSf,KAAK,CAACgB,GAAN,CAAUF,GAAV,EAAeG,IAAf,CAAoB,UAAAC,GAAG,EAAE;gBAC3BC,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBF,GAAG,CAACN,IAAtB;;gBACA,IAAIM,GAAG,CAACN,IAAR,EAAc;kBACd,IAAIG,SAAJ,EAAeF,OAAO,CAACK,GAAG,CAACN,IAAL,CAAP;gBACd;cACJ,CALK,CADT;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAD;;IAQA,OAAO,YAAM;MACTG,SAAS,GAAG,KAAZ;IACD,CAFH;EAGH,CAbU,EAaT,EAbS,CAAT;EAcA,OACE,MAAC,IAAD;IAAM,KAAK,EAAEM,MAAM,CAACC,SAApB;IAAA,WACE,KAAC,IAAD;MAAM,KAAK,EAAED,MAAM,CAACE,KAApB;MAAA,UAA4Bd;IAA5B,EADF,EAEE,KAAC,IAAD;MAAM,KAAK,EAAEY,MAAM,CAACG,SAApB;MAA+B,UAAU,EAAC,MAA1C;MAAiD,SAAS,EAAC;IAA3D,EAFF,EAGE,KAAC,cAAD;MAAgB,IAAI,EAAC;IAArB,EAHF,EAME,KAAC,SAAD;MAAW,KAAK,EAAEC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,OAAxB,GAAkC;IAApD,EANF;EAAA,EADF;AAUD;AAED,IAAML,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;EAC/BN,SAAS,EAAE;IACTO,IAAI,EAAE,CADG;IAETC,UAAU,EAAE,QAFH;IAGTC,cAAc,EAAE;EAHP,CADoB;EAM/BR,KAAK,EAAE;IACLS,QAAQ,EAAE,EADL;IAELC,UAAU,EAAE;EAFP,CANwB;EAU/BT,SAAS,EAAE;IACTU,cAAc,EAAE,EADP;IAETC,MAAM,EAAE,CAFC;IAGTC,KAAK,EAAE;EAHE;AAVoB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}