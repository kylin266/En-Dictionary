{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as SQLite from \"expo-sqlite\";\nexport var openDatabase = function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('creating DB');\n          return _context.abrupt(\"return\", SQLite.openDatabase('dictionary.db'));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createTable = function _callee6(db) {\n  var clearData, history, insert, bookmark;\n  return _regeneratorRuntime.async(function _callee6$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          console.log('creating table');\n          clearData = 'DELETE FROM history where location=1';\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee2(tx) {\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(clearData));\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 4:\n          history = \"CREATE TABLE IF NOT EXISTS history (\\n        word TEXT NOT NULL,\\n        location INT NOT NULL\\n    );\";\n          insert = \"INSERT INTO history VALUES ('alien',1)\";\n          _context6.next = 8;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee3(tx) {\n            return _regeneratorRuntime.async(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(history, null, {}));\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 8:\n          _context6.next = 10;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee4(tx) {\n            return _regeneratorRuntime.async(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(insert));\n\n                  case 2:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 10:\n          bookmark = \"CREATE TABLE IF NOT EXISTS bookmark(\\n    word TEXT NOT NULL,\\n    location INT NOT NULL\\n);\";\n          _context6.next = 13;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee5(tx) {\n            return _regeneratorRuntime.async(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return _regeneratorRuntime.awrap(tx.executeSql(bookmark));\n\n                  case 2:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getWordHistory = function _callee8(db) {\n  var query, result;\n  return _regeneratorRuntime.async(function _callee8$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          query = \"SELECT * FROM history\";\n          result = [];\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(db.transaction(function _callee7(tx) {\n            return _regeneratorRuntime.async(function _callee7$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    tx.executeSql(query, null, function (tx, resultSet) {\n                      var data = [];\n\n                      for (var i = 0, c = resultSet.rows.length; i < c; i++) {\n                        data.push(resultSet.rows.item(i));\n                      }\n\n                      result = data;\n                      console.log('1', result);\n                      return result;\n                    }, function (tx, error) {\n                      console.log(error.message);\n                    });\n\n                  case 1:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }));\n\n        case 4:\n          console.log('2', result);\n          return _context8.abrupt(\"return\", result);\n\n        case 6:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"names":["SQLite","openDatabase","console","log","createTable","db","clearData","transaction","tx","executeSql","history","insert","bookmark","getWordHistory","query","result","resultSet","data","i","c","rows","length","push","item","error","message"],"sources":["/Users/littlecorn/Documents/lose-weight-apps/db.tsx"],"sourcesContent":["import * as SQLite from \"expo-sqlite\";\nimport { useState } from \"react\";\n\nexport const openDatabase = async () => {\n    console.log('creating DB');\n    return SQLite.openDatabase('dictionary.db');\n};\n\nexport const createTable = async (db: any) => {\n    // create table if not exists\n    console.log('creating table')\n    const clearData = 'DELETE FROM history where location=1';\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(clearData);\n    });\n    const history = `CREATE TABLE IF NOT EXISTS history (\n        word TEXT NOT NULL,\n        location INT NOT NULL\n    );`;\n    const insert = `INSERT INTO history VALUES ('alien',1)`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(history,null,{},);\n    });\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(insert);\n    });\n    const bookmark = `CREATE TABLE IF NOT EXISTS bookmark(\n    word TEXT NOT NULL,\n    location INT NOT NULL\n);`;\n    await db.transaction(async (tx: any) => {\n        await tx.executeSql(bookmark);\n    });\n};\n\nexport const getWordHistory = async (db: any) => {\n    const query = `SELECT * FROM history`;\n    let result = [] as any;\n    await db.transaction( async (tx: any) => {\n        tx.executeSql(query,null,\n            function (tx: any, resultSet : any) {\n                let data = [];\n                for (let i = 0, c = resultSet.rows.length;i < c;i++) {\n                    data.push(resultSet.rows.item(i));\n                }\n                result = data;\n                console.log('1',result);\n                return result;\n            },\n            function (tx : any, error : any) {\n                console.log(error.message);\n            });\n        \n    })\n    console.log('2',result)\n    return result;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}